{"qid": "5ccda891-9f3c-4787-993c-0c72e07de25c", "graph": "geography", "gold_cypher": "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: 'Natara'}) WITH DISTINCT n WHERE n.area_km2 < 390000 RETURN n.name", "nl_question": "What are the names of lakes situated in countries through which the Natara River flows, with an area of less than 390,000 square kilometers?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of lakes situated in countries through which the [LITERAL] River flows, with an area of less than 390,000 square kilometers?", "masked_cypher": "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death.year < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.first_flight.year > [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name"], "candidates": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC"], "label": 8}
{"qid": "21e88819-1f35-47d5-afad-c37d695d916a", "graph": "geography", "gold_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of all countries?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of all countries?", "masked_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Continent) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.name"], "label": 16}
{"qid": "ac09e4a1-a550-433e-9887-ceda1bdf235f", "graph": "geography", "gold_cypher": "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: 'India'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of mountain ranges that include mountains located in India, and how many such mountains are part of each range?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of mountain ranges that include mountains located in [LITERAL], and how many such mountains are part of each range?", "masked_cypher": "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN COUNT(DISTINCT n.elevation_m)", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN n.name, n.elevation_m", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.elevation_m)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.elevation_m)", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "label": 14}
{"qid": "78d0c54c-4c8d-4b25-8ac4-102bde2737cc", "graph": "geography", "gold_cypher": "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names of oceans and their areas in square kilometers?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names of oceans and their areas in square kilometers?", "masked_cypher": "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name = m0.area_km2 AS answer", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.name AS answer", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 16}
{"qid": "d96ced22-b55e-4c1b-b32d-6f9a774a53a2", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: 'Pacific Ocean'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "nl_question": "Which country, through which a river flows into the Pacific Ocean, has the largest area in square kilometers?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Which country, through which a river flows into the [LITERAL], has the largest area in square kilometers?", "masked_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange)<-[r1:partOf]-(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.elevation_m DESC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1"], "candidates": ["MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.area_km2 AS prop RETURN DISTINCT prop", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.area_km2)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.area_km2)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN MAX(n.area_km2)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)"], "label": 13}
{"qid": "44a49d29-c1b2-4f75-bf8c-017975610503", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Southern Ocean'}), (m0:Ocean {name: 'Indian Ocean'}) RETURN n.area_km2 - m0.area_km2 AS answer", "nl_question": "What is the difference in square kilometers between the area of the Southern Ocean and the Indian Ocean?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in square kilometers between the area of the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.avg_vertical_depth_m > m0.avg_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.max_vertical_depth_m - n.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.area_km2 AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2"], "label": 0}
{"qid": "54ecff59-235d-4183-b74d-27b2880266be", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: 'Peru'}) WITH DISTINCT n RETURN n.name, n.capital", "nl_question": "What are the names and capitals of countries where there are mountains that are also located in Peru?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and capitals of countries where there are mountains that are also located in [LITERAL]?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <> '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN COUNT(DISTINCT n.capital)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.elevation_m", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n WHERE n.capital >= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n WHERE n.capital <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n WHERE n.capital = '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name ORDER BY n.capital ASC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name ORDER BY n.capital ASC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN MIN(n.capital)"], "label": 9}
{"qid": "c3b8b137-41a1-45af-8b58-f9889f2325b4", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "nl_question": "What are the names of countries in which a drainage basin is located, sorted by their area from smallest to largest?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of countries in which a drainage basin is located, sorted by their area from smallest to largest?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country),(n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC"], "candidates": ["MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN MIN(n.area_km2)"], "label": 11}
{"qid": "e03914fb-882d-4c21-a8c7-cadfedc5bf86", "graph": "geography", "gold_cypher": "MATCH (n:Mountain)-[r1:partOf]->(m1:MountainRange {name: 'Severnyy Tanymas'}) OPTIONAL MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all mountains that are part of the Severnyy Tanymas range, along with the number of countries each mountain is located in.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all mountains that are part of the [LITERAL] range, along with the number of countries each mountain is located in.", "masked_cypher": "MATCH (n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:PoliticalParty)-[r1:headedBy]->(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) OPTIONAL MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.elevation_m", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name"], "label": 12}
{"qid": "081e13fa-7bec-4dcf-94e6-ee3d38962938", "graph": "geography", "gold_cypher": "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: 'Bug Basin'}) WITH DISTINCT n WHERE n.area_km2 > 200 RETURN n.name", "nl_question": "What are the names of lakes situated in the same country as the Bug Basin, with an area greater than 200 square kilometers?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of lakes situated in the same country as the [LITERAL], with an area greater than [LITERAL] square kilometers?", "masked_cypher": "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.first_flight.year > [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.runtime_minute > [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd > [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person),(n:Movie)-[r1:writtenBy]->(m0:Person) WITH DISTINCT n WHERE n.global_box_office_usd > [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death.year < [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name"], "candidates": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name"], "label": 1}
{"qid": "e5282147-98fb-4165-a843-9890a0a65f84", "graph": "geography", "gold_cypher": "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of continents where countries are located?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of continents where countries are located?", "masked_cypher": "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name"], "label": 4}
{"qid": "86d32f7f-36cd-4757-9e60-fb39d2f3ac7c", "graph": "geography", "gold_cypher": "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: 'Nile'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of the oceans that the Nile River flows into?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of the oceans that the [LITERAL] River flows into?", "masked_cypher": "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 8}
{"qid": "07ccbdc9-a24a-4ad6-a01d-0eacb52d0ae8", "graph": "geography", "gold_cypher": "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: 'Himalayas'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: 'Gurans Himal'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of mountains that are part of both the Himalayas and the Gurans Himal?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of mountains that are part of both the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN min(n.elevation_m)", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "CALL { MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}),(n:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfGovernment]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}),(n:PoliticalParty)-[r1:headedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}),(n:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:MountainRange {name: '[LITERAL]'}),(n:MountainRange)<-[r1:partOf]-(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN n.name, n.elevation_m", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m > [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n WHERE n.elevation_m <= [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m >= [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.elevation_m", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n WHERE n.elevation_m = [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m <= [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.elevation_m", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m = [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m = [LITERAL] RETURN n.name", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange)<-[r1:partOf]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 19}
{"qid": "94555092-24af-45b9-9f74-f715aa5c2f64", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin {name: 'Sava Basin'}) WITH DISTINCT n RETURN n.area_km2", "nl_question": "What is the area of the Sava Basin in square kilometers?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the area of the [LITERAL] in square kilometers?", "masked_cypher": "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}),(n:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2"], "label": 9}
{"qid": "b40148c3-95d3-419a-b20c-5253705c8cdf", "graph": "geography", "gold_cypher": "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: 'Russia'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: 'Irtysh basin'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "nl_question": "What are the names of rivers that flow through Russia and are part of the Irtysh basin, sorted by their length from shortest to longest?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of rivers that flow through [LITERAL] and are part of the [LITERAL], sorted by their length from shortest to longest?", "masked_cypher": "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.discharge_m3_s DESC", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.discharge_m3_s ASC", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician)<-[r1:hasHeadOfState]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.elevation_m ASC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC"], "candidates": ["MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC"], "label": 19}
{"qid": "5103be93-e84f-4ad3-962d-0a17634201b4", "graph": "geography", "gold_cypher": "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: 'Chinchey'}) WITH DISTINCT n RETURN n.name, n.length_km", "nl_question": "What are the names and lengths in kilometers of rivers that pass through countries where the Chinchey mountain is located?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and lengths in kilometers of rivers that pass through countries where the [LITERAL] mountain is located?", "masked_cypher": "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1"], "candidates": ["MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.length_km)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.length_km AS prop RETURN DISTINCT prop", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.length_km)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.length_km)"], "label": 12}
{"qid": "4c28238c-6fca-4243-aa0e-86f5394520f1", "graph": "geography", "gold_cypher": "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of lakes that rivers flow into?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of lakes that rivers flow into?", "masked_cypher": "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n RETURN n.name, n.discharge_m3_s", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.discharge_m3_s != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.discharge_m3_s > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.discharge_m3_s >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.discharge_m3_s <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.discharge_m3_s < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.discharge_m3_s = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name"], "label": 19}
{"qid": "75d53e0a-7572-41fd-a682-90b5c03688ec", "graph": "geography", "gold_cypher": "MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: 'Arctic Ocean'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all rivers that flow into the Arctic Ocean, along with the number of countries each river passes through.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all rivers that flow into the [LITERAL], along with the number of countries each river passes through.", "masked_cypher": "MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)<-[r0:flowsInto]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)<-[r0:flowsInto]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsInto]->(m0:Ocean) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.length_km)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC"], "label": 0}
{"qid": "74d0ee4a-db37-4c89-b514-08f0898f9ce4", "graph": "geography", "gold_cypher": "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: 'Beloye Lake'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of continents that have countries containing Beloye Lake, and how many such countries are there in each continent?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of continents that have countries containing [LITERAL], and how many such countries are there in each continent?", "masked_cypher": "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.vertical_depth_m)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.capital)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1"], "label": 5}
{"qid": "262dad9e-5c1d-4aa7-9387-e56b4375c876", "graph": "geography", "gold_cypher": "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: 'Lena basin'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: 'Atlantic Ocean'}) WITH DISTINCT n RETURN n.name, n.length_km", "nl_question": "What are the names and lengths in kilometers of rivers that are part of the Lena basin and also flow into the Atlantic Ocean?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and lengths in kilometers of rivers that are part of the [LITERAL] and also flow into the [LITERAL]?", "masked_cypher": "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.discharge_m3_s", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name"], "candidates": ["MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.length_km", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.length_km", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km"], "label": 19}
{"qid": "b6c0fb68-f151-4907-9c88-b28b1a4d9070", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Arctic Ocean'}) WITH DISTINCT n RETURN n.area_km2", "nl_question": "What is the area of the Arctic Ocean in square kilometers?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the area of the [LITERAL] in square kilometers?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.name - n.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.name AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Ocean) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name = m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.area_km2 AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2"], "label": 8}
{"qid": "2a57b762-22ee-4195-9258-225090e0d998", "graph": "geography", "gold_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: 'South America'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: 'Baquiá Preto River'}) WITH DISTINCT n RETURN n.name, n.capital", "nl_question": "What are the names and capitals of countries in South America that the Baquiá Preto River flows through?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and capitals of countries in [LITERAL] that the [LITERAL] flows through?", "masked_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital"], "candidates": ["MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN COUNT(DISTINCT n.capital)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.capital)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.capital)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN MIN(n.capital)"], "label": 9}
{"qid": "375cd55e-b9bb-4123-9237-03a74131376c", "graph": "geography", "gold_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: 'Oceania'}) WITH DISTINCT n RETURN n.name, n.capital", "nl_question": "What are the names and capitals of countries located in Oceania?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and capitals of countries located in [LITERAL]?", "masked_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <> '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n UNWIND n.capital AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.capital != '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.capital > '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.capital >= '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.capital < '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.capital <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.capital = '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital = '[LITERAL]' RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.capital ASC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.capital ASC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN MIN(n.capital)"], "label": 12}
{"qid": "266adbd5-e795-4dc8-ab4f-6b376c5f5f3a", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: 'Sangha'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of drainage basins that the Sangha River is part of?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of drainage basins that the [LITERAL] River is part of?", "masked_cypher": "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 12}
{"qid": "2a041d74-b551-4777-b9fa-1fcbf9441df9", "graph": "geography", "gold_cypher": "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: 'Republic of the Congo'}) WITH DISTINCT n RETURN n.name, n.length_km", "nl_question": "What are the names and lengths in kilometers of rivers that flow through the Republic of the Congo?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and lengths in kilometers of rivers that flow through the [LITERAL]?", "masked_cypher": "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC", "MATCH (n:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.discharge_m3_s", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.discharge_m3_s", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.discharge_m3_s DESC", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name"], "candidates": ["MATCH (n:River)-[r0:flowsInto]->(m0:Ocean) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km"], "label": 17}
{"qid": "23d72957-8cc8-480a-b886-a68a0dd24a05", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: 'Nottaway River basin'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: 'Selwyn Lake'}) WITH DISTINCT n RETURN n.name, n.capital", "nl_question": "What are the names and capitals of countries where both the Nottaway River basin and Selwyn Lake are located?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>),(n)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and capitals of countries where both the [LITERAL] and [LITERAL] are located?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <> '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN avg(n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.capital)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital >= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital = '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital = '[LITERAL]' RETURN n.name"], "label": 12}
{"qid": "a5563210-24de-4116-a159-c2343916209a", "graph": "geography", "gold_cypher": "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin {name: 'Don basin'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "nl_question": "What are the names and vertical depths of lakes that are part of the Don basin?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and vertical depths of lakes that are part of the [LITERAL]?", "masked_cypher": "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "CALL { MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m >= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m <= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m != [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m <= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m = [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.vertical_depth_m DESC", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m <= [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.vertical_depth_m DESC LIMIT 1", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.vertical_depth_m ASC LIMIT 1", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m"], "label": 4}
{"qid": "919d774a-197d-42ad-b0ed-dde4d0411833", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: 'Pacific Ocean'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of drainage basins that include rivers flowing into the Pacific Ocean?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of drainage basins that include rivers flowing into the [LITERAL]?", "masked_cypher": "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC"], "label": 16}
{"qid": "b5609f90-d8a5-4de2-aa88-4c365ed51075", "graph": "geography", "gold_cypher": "MATCH (n:Lake {name: 'Frobisher Lake'}) WITH DISTINCT n RETURN n.area_km2", "nl_question": "What is the area of Frobisher Lake in square kilometers?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the area of [LITERAL] in square kilometers?", "masked_cypher": "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Lake) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.area_km2"], "label": 1}
{"qid": "ce23daeb-dc6d-4a92-ad7a-f69b5ad3179d", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: 'Lake Mweru'}) WITH DISTINCT n RETURN n.name, n.capital", "nl_question": "What are the names and capitals of countries where a drainage basin that includes Lake Mweru is located?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and capitals of countries where a drainage basin that includes [LITERAL] is located?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <> '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN COUNT(DISTINCT n.capital)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital = '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN MIN(n.capital)"], "label": 5}
{"qid": "a5d3187b-eb17-4693-a374-c3fc32393f9f", "graph": "geography", "gold_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: 'Europe'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: 'Asia'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of countries that are situated in both Europe and Asia?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of countries that are situated in both [LITERAL] and [LITERAL]?", "masked_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "CALL { MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}),(n:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfGovernment]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country {name: '[LITERAL]'}),(n:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country {name: '[LITERAL]'}),(n:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 17}
{"qid": "a5d834eb-f5b5-4a5f-b5b1-88193de45819", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: 'Sava Basin'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of countries within the Sava Basin, along with the count of lakes located in each.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)<-[r1]-(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of countries within the [LITERAL], along with the count of lakes located in each.", "masked_cypher": "MATCH (n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:PoliticalParty)-[r1:headedBy]->(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) OPTIONAL MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.capital)"], "label": 10}
{"qid": "cd6dd4f6-30c9-4cf1-bd75-ee104ae65bff", "graph": "geography", "gold_cypher": "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: 'Armenia'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of lakes located in Armenia?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of lakes located in [LITERAL]?", "masked_cypher": "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 2}
{"qid": "7ecfda12-dab6-43a4-b15a-24d308d2291f", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Indian Ocean'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "nl_question": "What is the maximum vertical depth in meters of the Indian Ocean?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the maximum vertical depth in meters of the [LITERAL]?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Ocean) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)"], "label": 2}
{"qid": "41275b23-5018-4cd9-8354-cb5eb64bb29f", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: 'Playgreen Lake'}) WITH DISTINCT n RETURN n.name, n.capital", "nl_question": "What are the names and capitals of countries where Playgreen Lake is located?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and capitals of countries where [LITERAL] is located?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.capital <> '[LITERAL]' RETURN n.name"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN COUNT(DISTINCT n.capital)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.capital >= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.capital <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.capital = '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN MAX(n.capital)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.capital ASC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.capital DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN MIN(n.capital)"], "label": 5}
{"qid": "97bfc54c-d65f-4238-92c4-24bc1ac94e5a", "graph": "geography", "gold_cypher": "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: 'Adriatic Sea'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of continents that have countries connected to the Adriatic Sea drainage basin?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of continents that have countries connected to the [LITERAL] drainage basin?", "masked_cypher": "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1"], "label": 14}
{"qid": "7376c7c7-1a30-4d29-92a4-7fce00cb3982", "graph": "geography", "gold_cypher": "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: 'Orinoco basin'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of rivers that flow through countries overlapping with the Orinoco Basin, and how many such countries does each river pass through?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)-[r0]->(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of rivers that flow through countries overlapping with the Orinoco Basin, and how many such countries does each river pass through?", "masked_cypher": "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.discharge_m3_s)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.discharge_m3_s)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name, n.name"], "label": 5}
{"qid": "35a91fe9-6aba-4f9d-bbb3-be95a8813290", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: 'Lake Kisale'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of drainage basins that Lake Kisale is part of?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of drainage basins that [LITERAL] is part of?", "masked_cypher": "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 12}
{"qid": "56c63afc-6a2d-4068-8b45-a70627f24a51", "graph": "geography", "gold_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: 'South America'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "nl_question": "What are the names of countries located in South America, sorted by their area in square kilometers from largest to smallest?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of countries located in [LITERAL], sorted by their area in square kilometers from largest to smallest?", "masked_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.discharge_m3_s DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC"], "candidates": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC"], "label": 8}
{"qid": "f0569af4-d044-47a1-9fd9-0b300ec7c035", "graph": "geography", "gold_cypher": "MATCH (n:Country {name: 'Republic of Ireland'}), (m0:Country {name: 'Turkey'}) RETURN n.area_km2 - m0.area_km2 AS answer", "nl_question": "What is the difference in square kilometers between the area of the Republic of Ireland and that of Turkey?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in square kilometers between the area of the [LITERAL] and that of [LITERAL]?", "masked_cypher": "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.area_km2 - n.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.area_km2 - n.name AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.name AS answer", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 = m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 = m0.name AS answer", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2"], "label": 3}
{"qid": "57269213-a394-4a28-bf11-ec20ccc14667", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: 'Ottawa River drainage basin'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of countries where lakes within the Ottawa River drainage basin are located?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of countries where lakes within the [LITERAL] are located?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}),(n:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 12}
{"qid": "fdf028ff-2d51-4b6b-bcfd-5c74cd48836b", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin {name: 'Congo basin'}), (m0:DrainageBasin {name: 'Tobol basin'}) RETURN n.area_km2 - m0.area_km2 AS answer", "nl_question": "What is the difference in square kilometers between the area of the Congo basin and the Tobol basin?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in square kilometers between the area of the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN m0.area_km2 - n.area_km2 AS answer", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.name AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN m0.area_km2 - n.name AS answer", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 = m0.area_km2 AS answer", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 = m0.name AS answer", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.area_km2)"], "label": 0}
{"qid": "2d60149f-156f-4b88-b0c1-beb03e5fb79f", "graph": "geography", "gold_cypher": "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "nl_question": "What are the names of oceans that rivers flow into, sorted by their area in square kilometers from smallest to largest?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of oceans that rivers flow into, sorted by their area in square kilometers from smallest to largest?", "masked_cypher": "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country),(n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC"], "candidates": ["MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC"], "label": 13}
{"qid": "287f030e-2028-4ed4-a280-a51e4747a928", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Pacific Ocean'}), (m0:Ocean {name: 'Indian Ocean'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "nl_question": "What is the difference in average vertical depth between the Pacific Ocean and the Indian Ocean?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in average vertical depth between the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.avg_vertical_depth_m > m0.avg_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.range_km AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.vertical_depth_m - m0.vertical_depth_m AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_survivors - m0.number_of_survivors AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.height_metre AS answer"], "candidates": ["MATCH (n:Ocean) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.name - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.max_vertical_depth_m - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN COUNT(DISTINCT n.avg_vertical_depth_m)", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.max_vertical_depth_m AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.name AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m"], "label": 8}
{"qid": "2db66c1c-4c3a-4eaa-91d5-eca7fed913a5", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: 'Tobol basin'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: 'Yemnaya'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of countries where the Tobol basin is located and through which the Yemnaya River flows?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>),(n)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of countries where the [LITERAL] is located and through which the [LITERAL] River flows?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN avg(n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 9}
{"qid": "101f9725-fc7c-49f9-805e-cf6ce7296dc0", "graph": "geography", "gold_cypher": "CALL { MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: 'Pamir Mountains'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: 'People\\'s Republic of China'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "nl_question": "How many mountains are either part of the Pamir Mountains or located in the People's Republic of China?", "from_template": {"match_category": "special_union", "match_cypher": "CALL { MATCH (n)-[r0]->(m0<name>) RETURN n, m0 as m UNION MATCH (n)-[r1]->(m1<name>) RETURN n, m1 as m }", "return_pattern_id": "n_union_count", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN count(n)"}, "masked_question": "How many mountains are either part of the [LITERAL] or located in the [LITERAL]?", "masked_cypher": "CALL { MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "negative_cypher": [], "hard_negative_cypher": ["CALL { MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Award)<-[r0:receivesAward]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Award)<-[r1:receivesAward]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)<-[r0:killedBy]-(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Position)<-[r0:playsPosition]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Position)<-[r1:playsPosition]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "candidates": ["MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.elevation_m)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "CALL { MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.elevation_m", "CALL { MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) OPTIONAL MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}),(n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange) WITH DISTINCT n RETURN n.name, n.name"], "label": 8}
{"qid": "8bf273cc-4efb-4748-8d2a-575e688bcbbb", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: 'Supung Lake'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of countries where Supung Lake is located, and how many mountains are in each of those countries?", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)<-[r1]-(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of countries where [LITERAL] is located, and how many mountains are in each of those countries?", "masked_cypher": "MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:PoliticalParty)-[r1:headedBy]->(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) OPTIONAL MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.elevation_m)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.elevation_m", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m > [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1"], "label": 13}
{"qid": "31421fdb-434b-422a-b331-28f68d70e509", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: 'Africa'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of drainage basins located in countries on the African continent, and how many such countries does each basin span?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of drainage basins located in countries on the [LITERAL]n continent, and how many such countries does each basin span?", "masked_cypher": "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name"], "label": 10}
{"qid": "12ac749f-f75a-4cce-ba24-81e42ca37836", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: 'Namibia'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of drainage basins located in Namibia?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of drainage basins located in [LITERAL]?", "masked_cypher": "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:DrainageBasin)<-[r1:partOf]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 14}
{"qid": "3b036b53-f525-47bc-94d2-6502285f41da", "graph": "geography", "gold_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "nl_question": "Which country has the smallest area in square kilometers?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Which country has the smallest area in square kilometers?", "masked_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician),(n:Country)-[r1:hasHeadOfState]->(m0:Politician) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country),(n:Movie)-[r1:releasedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country),(n:Movie)-[r1:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person),(n:Movie)-[r1:writtenBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)"], "label": 11}
{"qid": "13fc8202-e21c-47e0-b2b3-7da07d283649", "graph": "geography", "gold_cypher": "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of lakes that rivers flow into?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of lakes that rivers flow into?", "masked_cypher": "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 7}
{"qid": "91160bff-0a32-429e-aa98-0f7e9c696a72", "graph": "geography", "gold_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: 'North America'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: 'Lake Texcoco'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of countries that are located in North America and have Lake Texcoco located in them?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of countries that are located in [LITERAL] and have [LITERAL] located in them?", "masked_cypher": "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name"], "label": 0}
{"qid": "a5ca65a1-559b-42d2-9468-5cf0ef81d5fd", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Indian Ocean'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "nl_question": "What is the average vertical depth in meters of the Indian Ocean?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the average vertical depth in meters of the [LITERAL]?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.avg_vertical_depth_m > m0.avg_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Ocean) WITH DISTINCT n RETURN COUNT(DISTINCT n.avg_vertical_depth_m)", "MATCH (n:Ocean) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN COUNT(DISTINCT n.avg_vertical_depth_m)", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.name - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name = m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m"], "label": 7}
{"qid": "3ee213a6-df95-4a88-ab47-44ffd608e52a", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of countries that rivers flow through?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of countries that rivers flow through?", "masked_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.discharge_m3_s > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.discharge_m3_s != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.discharge_m3_s >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.discharge_m3_s <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.discharge_m3_s < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.discharge_m3_s = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 18}
{"qid": "bc6a8e96-84d2-46ab-ad69-a17b35e9a735", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: 'Pacific Ocean'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Which countries are traversed by rivers that flow into the Pacific Ocean, and how many such rivers pass through each country?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Which countries are traversed by rivers that flow into the [LITERAL], and how many such rivers pass through each country?", "masked_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.discharge_m3_s)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsInto]->(m0:Ocean) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.length_km)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.length_km)", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km"], "label": 3}
{"qid": "07ecc63b-94f5-45b2-9537-0f564e228380", "graph": "geography", "gold_cypher": "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: 'Europe'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of all countries located in Europe, along with the number of lakes situated in each.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of all countries located in [LITERAL], along with the number of lakes situated in each.", "masked_cypher": "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.vertical_depth_m)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.name"], "label": 12}
{"qid": "bc0af7f5-f6d7-4fca-be75-3ea05fe9642a", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: 'Kangto'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of the countries in which Kangto is located?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of the countries in which [LITERAL] is located?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n UNWIND n.area_km2 AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 6}
{"qid": "bd407e92-efd2-42e3-a471-669e45736401", "graph": "geography", "gold_cypher": "MATCH (n:Country {name: 'South Korea'}) WITH DISTINCT n RETURN n.area_km2", "nl_question": "What is the area of South Korea in square kilometers?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the area of [LITERAL] in square kilometers?", "masked_cypher": "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.official_language", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent)<-[r1:locatedIn]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.name - m0.area_km2 AS answer", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.area_km2 - n.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.area_km2 - n.name AS answer", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.name = m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 = m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 = m0.name AS answer", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2"], "label": 14}
{"qid": "58066c4e-c6c3-4765-b21e-bfac30fed256", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Arctic Ocean'}), (m0:Ocean {name: 'Pacific Ocean'}) RETURN n.area_km2 - m0.area_km2 AS answer", "nl_question": "What is the difference in area, in square kilometers, between the Arctic Ocean and the Pacific Ocean?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in area, in square kilometers, between the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.avg_vertical_depth_m > m0.avg_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.max_vertical_depth_m - n.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.area_km2 AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 = m0.avg_vertical_depth_m AS answer"], "label": 1}
{"qid": "4b9638e0-dbfd-4fbc-a675-64f1255d01a9", "graph": "geography", "gold_cypher": "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: 'Lungser Kangri'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of continents where a country containing Lungser Kangri is located?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of continents where a country containing [LITERAL] is located?", "masked_cypher": "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m > [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m <= [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1"], "label": 12}
{"qid": "4d82453a-315f-4713-b302-e7081d91c7f1", "graph": "geography", "gold_cypher": "MATCH (n:Continent) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of all the continents?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of all the continents?", "masked_cypher": "MATCH (n:Continent) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Continent) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Continent) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Continent) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Continent) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent {name: '[LITERAL]'}), (m0:Continent {name: '[LITERAL]'}) RETURN n.name = m0.name AS answer", "MATCH (n:Continent) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Continent) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Continent) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Continent) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Continent) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Continent) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1"], "label": 14}
{"qid": "95d8969d-e2f8-4ed7-8675-af529851ce76", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "Provide the names of drainage basins along with their areas in square kilometers.", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Provide the names of drainage basins along with their areas in square kilometers.", "masked_cypher": "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 1}
{"qid": "8637a02d-8cff-4326-926e-39fff9315457", "graph": "geography", "gold_cypher": "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: 'South America'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of all countries in South America, along with the number of mountains located in each.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of all countries in [LITERAL], along with the number of mountains located in each.", "masked_cypher": "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.elevation_m)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.elevation_m)", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.elevation_m", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name"], "label": 12}
{"qid": "c4a49bf6-928c-483b-a5d9-f5c24359a308", "graph": "geography", "gold_cypher": "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: 'Dongting Lake'}) WITH DISTINCT n WHERE n.length_km <= 1000 RETURN n.name", "nl_question": "What are the names of rivers that flow into Dongting Lake and are 1,000 kilometers or shorter?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of rivers that flow into [LITERAL] and are 1,000 kilometers or shorter?", "masked_cypher": "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position)<-[r1:playsPosition]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.mass_kg <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}),(n:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km != [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km >= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Lake {name: '[LITERAL]'}),(n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:River)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name"], "label": 5}
{"qid": "660282c8-1354-4435-b4a9-0b7c1286a724", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: 'Canada'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of drainage basins that include lakes located in Canada, and how many such lakes are part of each basin?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of drainage basins that include lakes located in [LITERAL], and how many such lakes are part of each basin?", "masked_cypher": "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.name"], "label": 13}
{"qid": "0eee9bd1-316c-485f-9c05-909c7c1babab", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Atlantic Ocean'}), (m0:Ocean {name: 'Arctic Ocean'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "nl_question": "What is the difference in maximum vertical depth between the Atlantic Ocean and the Arctic Ocean?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in maximum vertical depth between the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.avg_vertical_depth_m > m0.avg_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.range_km AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.vertical_depth_m - m0.vertical_depth_m AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_survivors - m0.number_of_survivors AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.height_metre AS answer", "MATCH (n:River {name: '[LITERAL]'}), (m0:River {name: '[LITERAL]'}) RETURN n.length_km - m0.length_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer"], "candidates": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.max_vertical_depth_m - n.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.name AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.max_vertical_depth_m - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m = m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.avg_vertical_depth_m ASC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)"], "label": 2}
{"qid": "15eb915b-7fd4-4e80-8720-b67e9084a25b", "graph": "geography", "gold_cypher": "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: 'Mekong River'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of the oceans that the Mekong River flows into?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of the oceans that the [LITERAL] flows into?", "masked_cypher": "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "candidates": ["MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 14}
{"qid": "e9c6c774-d042-4358-a27c-b3a32d49b4eb", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Pacific Ocean'}), (m0:Ocean {name: 'Indian Ocean'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "nl_question": "What is the difference in maximum vertical depth between the Pacific Ocean and the Indian Ocean?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in maximum vertical depth between the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.max_vertical_depth_m > m0.max_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.avg_vertical_depth_m > m0.avg_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.range_km AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.vertical_depth_m - m0.vertical_depth_m AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_survivors - m0.number_of_survivors AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.height_metre AS answer", "MATCH (n:River {name: '[LITERAL]'}), (m0:River {name: '[LITERAL]'}) RETURN n.length_km - m0.length_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer"], "candidates": ["MATCH (n:Ocean) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.max_vertical_depth_m - n.max_vertical_depth_m AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.name AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.max_vertical_depth_m - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.max_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.max_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)"], "label": 2}
{"qid": "ca466b33-31fd-4ee4-8daf-a88e351f54f1", "graph": "geography", "gold_cypher": "MATCH (n:Ocean {name: 'Arctic Ocean'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "nl_question": "What is the average vertical depth in meters of the Arctic Ocean?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the average vertical depth in meters of the [LITERAL]?", "masked_cypher": "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Ocean)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.avg_vertical_depth_m > m0.avg_vertical_depth_m THEN n.name ELSE m0.name END AS answer", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.area_km2 - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN COUNT(DISTINCT n.avg_vertical_depth_m)", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name - m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.avg_vertical_depth_m - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.avg_vertical_depth_m - m0.name AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN MAX(n.avg_vertical_depth_m)", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN m0.name - n.avg_vertical_depth_m AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.avg_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.avg_vertical_depth_m < [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n RETURN MIN(n.avg_vertical_depth_m)", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.avg_vertical_depth_m DESC", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.avg_vertical_depth_m ASC", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.avg_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.avg_vertical_depth_m = [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name = m0.avg_vertical_depth_m AS answer", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.avg_vertical_depth_m"], "label": 9}
{"qid": "511f6689-1ee7-44fb-8261-4e26e85ed42b", "graph": "geography", "gold_cypher": "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > 7400 RETURN n.name", "nl_question": "What are the names of oceans with a maximum vertical depth greater than 7,400 meters?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of oceans with a maximum vertical depth greater than 7,400 meters?", "masked_cypher": "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person),(n:Movie)-[r1:writtenBy]->(m0:Person) WITH DISTINCT n WHERE n.global_box_office_usd > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.first_flight.year > [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.runtime_minute > [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd > [LITERAL] RETURN n.name", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date.year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name"], "candidates": ["MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m >= [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m != [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m <= [LITERAL] RETURN n.name", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.max_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m < [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m = [LITERAL] RETURN n.name", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.name = m0.max_vertical_depth_m AS answer", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.max_vertical_depth_m DESC", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.max_vertical_depth_m ASC", "MATCH (n:Ocean) WITH DISTINCT n RETURN MAX(n.max_vertical_depth_m)", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name, n.max_vertical_depth_m", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.max_vertical_depth_m DESC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.max_vertical_depth_m ASC LIMIT 1", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n WHERE n.max_vertical_depth_m = [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.max_vertical_depth_m", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.max_vertical_depth_m"], "label": 0}
{"qid": "da6cef8d-2ebb-4b41-a5c3-af6e485297cf", "graph": "geography", "gold_cypher": "MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: 'Pacific Ocean'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all rivers that flow into the Pacific Ocean, along with the number of countries each river passes through.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all rivers that flow into the [LITERAL], along with the number of countries each river passes through.", "masked_cypher": "MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)<-[r0:flowsInto]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)<-[r0:flowsInto]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsInto]->(m0:Ocean) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) OPTIONAL MATCH (n:River)-[r0:flowsThrough]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.length_km)", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km > [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km <= [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km < [LITERAL] RETURN n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country {name: '[LITERAL]'}),(n:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_km = [LITERAL] RETURN n.name", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.length_km", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean {name: '[LITERAL]'}),(n:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_km"], "label": 3}
{"qid": "3c906933-db1a-48d5-ab60-ba9a664b6fdb", "graph": "geography", "gold_cypher": "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: 'Africa'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of all countries located in Africa, along with the number of drainage basins situated in each.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of all countries located in [LITERAL], along with the number of drainage basins situated in each.", "masked_cypher": "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name"], "label": 3}
{"qid": "653c5bb8-87af-45f1-b850-bd3ff2bfb4b7", "graph": "geography", "gold_cypher": "MATCH (n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: 'Congo basin'}) OPTIONAL MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all lakes that are part of the Congo basin, along with the number of countries each lake is located in.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all lakes that are part of the [LITERAL], along with the number of countries each lake is located in.", "masked_cypher": "MATCH (n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:locatedIn]->(m0:Continent) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:PoliticalParty)-[r1:headedBy]->(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) OPTIONAL MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.vertical_depth_m)", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake {name: '[LITERAL]'}),(n:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) OPTIONAL MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) OPTIONAL MATCH (n:Lake)-[r0:locatedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name"], "label": 18}
{"qid": "bf028cbd-d24e-42a8-b507-705f4897dffa", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "nl_question": "What are the names of countries that rivers flow through, sorted by their area in square kilometers from smallest to largest?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of countries that rivers flow through, sorted by their area in square kilometers from smallest to largest?", "masked_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country),(n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC"], "candidates": ["MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC"], "label": 3}
{"qid": "85686def-9835-4ba3-8572-6ed416bdf6bb", "graph": "geography", "gold_cypher": "MATCH (n:Country {name: 'Jordan'}), (m0:Country {name: 'Paraguay'}) RETURN n.area_km2 - m0.area_km2 AS answer", "nl_question": "What is the difference in square kilometers between the area of Jordan and that of Paraguay?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in square kilometers between the area of [LITERAL] and that of [LITERAL]?", "masked_cypher": "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.capital - n.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.capital - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.area_km2 - n.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.area_km2 - n.capital AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.name - m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.area_km2 - n.name AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.name AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 - m0.capital AS answer", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 = m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.capital = m0.area_km2 AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.area_km2 = m0.capital AS answer", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.area_km2)", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.area_km2)"], "label": 0}
{"qid": "e498ff27-9841-438b-8067-5e70212f734a", "graph": "geography", "gold_cypher": "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: 'People\\'s Republic of China'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: 'Yellow River Basin'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "nl_question": "What are the names and vertical depths of lakes situated in the People's Republic of China that are part of the Yellow River Basin?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and vertical depths of lakes situated in the [LITERAL] that are part of the [LITERAL]?", "masked_cypher": "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "CALL { MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.vertical_depth_m - m0.vertical_depth_m AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.vertical_depth_m - m0.vertical_depth_m AS answer", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender"], "candidates": ["MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m >= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m >= [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m <= [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m >= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m <= [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m < [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m <= [LITERAL] RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.vertical_depth_m = [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River {name: '[LITERAL]'}),(n:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n WHERE n.vertical_depth_m = [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.vertical_depth_m", "MATCH (n:Lake)-[r0:partOf]->(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.vertical_depth_m"], "label": 18}
{"qid": "d7e8b366-5d4f-4148-b538-ad309fe4493f", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: 'Kyrtau'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: 'Narva basin'}) WITH DISTINCT n RETURN n.name, n.area_km2", "nl_question": "What are the names and areas in square kilometers of countries through which the Kyrtau River flows and in which the Narva basin is located?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>),(n)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and areas in square kilometers of countries through which the [LITERAL] River flows and in which the [LITERAL] is located?", "masked_cypher": "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN avg(n.area_km2)", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Mountain {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.capital", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2"], "candidates": ["MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.area_km2"], "label": 1}
{"qid": "35e3d056-eb22-4594-adec-337c23fe465f", "graph": "geography", "gold_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of countries where drainage basins are located?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of countries where drainage basins are located?", "masked_cypher": "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 != [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 >= [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n WHERE n.area_km2 = [LITERAL] RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 <= [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.area_km2", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1"], "label": 14}
{"qid": "06564ba4-3c8a-45fd-a0f0-35ecb265e7d4", "graph": "geography", "gold_cypher": "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: 'Keller Lake'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "nl_question": "What are the names of drainage basins located in the same country as Keller Lake, sorted by their area in square kilometers from largest to smallest?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of drainage basins located in the same country as [LITERAL], sorted by their area in square kilometers from largest to smallest?", "masked_cypher": "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)-[r0:locatedIn]->(m0:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC", "MATCH (n:River)-[r0:flowsThrough]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.discharge_m3_s DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC"], "candidates": ["MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:Lake)-[r1:partOf]->(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)<-[r1:partOf]-(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)<-[r0:partOf]-(m0:Lake)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC"], "label": 1}
{"qid": "ff429c7d-42b0-4b3b-972d-1284e0164e2c", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftModel {name: 'Antonov An-12'}), (m0:AircraftModel {name: 'ATR 42'}) RETURN n.range_km - m0.range_km AS answer", "nl_question": "What is the difference in range, in kilometers, between the Antonov An-12 and the ATR 42?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in range, in kilometers, between the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.range_km AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.range_km > m0.range_km THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.range_km > m0.range_km THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.height_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.wingspan_metre - m0.wingspan_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.wingspan_metre - m0.wingspan_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.height_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.wingspan_metre > m0.wingspan_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.length_metre > m0.length_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.length_metre > m0.length_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.height_metre > m0.height_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.first_flight > m0.first_flight THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.first_flight > m0.first_flight THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.wingspan_metre > m0.wingspan_metre THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.range_km - n.wingspan_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.wingspan_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.wingspan_metre - n.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.length_metre - n.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.wingspan_metre - m0.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.range_km - n.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.range_km - n.length_metre AS answer", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}),(n:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.first_flight - m0.range_km AS answer", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}),(n:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.first_flight - n.range_km AS answer", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}),(n:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.first_flight AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.range_km - n.first_flight AS answer", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.range_km)", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}),(n:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.range_km)"], "label": 2}
{"qid": "b759ba57-97f5-4952-8566-58808efc4767", "graph": "flight_accident", "gold_cypher": "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: 'Aeroflot Flight 3603'}) WITH DISTINCT n RETURN n.name, n.country", "nl_question": "Who are the operators of Aeroflot Flight 3603, and what countries are they from?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Who are the operators of [LITERAL], and what countries are they from?", "masked_cypher": "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Operator)<-[r1:operatedBy]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie {name: '[LITERAL]'}),(n:ProductionCompany)<-[r1:producedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country"], "candidates": ["MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN COUNT(DISTINCT n.country)", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC LIMIT 1", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC LIMIT 1", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n WHERE n.country < '[LITERAL]' RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN MIN(n.country)"], "label": 11}
{"qid": "79a90866-e0fd-457c-9977-ec710fb6899e", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '2015 Juba plane crash'}) WITH DISTINCT n RETURN n.name, n.length_metre", "nl_question": "What are the names and lengths in meters of aircraft models involved in the 2015 Juba plane crash?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and lengths in meters of aircraft models involved in the [LITERAL]?", "masked_cypher": "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_metre", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.service_entry", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.first_flight", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}),(n:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.height_metre != [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.length_metre", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.length_metre != [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.height_metre <= [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.height_metre < [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.height_metre = [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.length_metre > [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.length_metre >= [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.length_metre <= [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.length_metre < [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.length_metre DESC", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.length_metre ASC", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.length_metre = [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.height_metre", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.length_metre ASC LIMIT 1", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.length_metre DESC LIMIT 1", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.length_metre", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_metre", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.range_km", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}),(n:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.length_metre"], "label": 17}
{"qid": "0f3dbdb0-6b02-4ed8-8964-b6da3f0ae9c9", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: 'S-92'}) WITH DISTINCT n RETURN n.name, n.launch_year", "nl_question": "Who are the manufacturers of the S-92, and what are their launch years?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Who are the manufacturers of the [LITERAL], and what are their launch years?", "masked_cypher": "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name"], "label": 8}
{"qid": "cf67f0ab-d4d3-4e18-842b-47428dddce33", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: 'Yinchuan Hedong International Airport'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "nl_question": "What are the names and injury counts of aviation accidents that took off from Yinchuan Hedong International Airport?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and injury counts of aviation accidents that took off from [LITERAL]?", "masked_cypher": "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN max(n.number_of_deaths)", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.flight_number", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport),(n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries DESC", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "CALL { MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator"], "candidates": ["MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries >= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries > [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries > [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries > [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries > [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries >= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_injuries > [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n RETURN n.name, n.number_of_injuries"], "label": 7}
{"qid": "d40780b7-ea79-4fd1-9f59-2677e0d25d74", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.iata_code", "nl_question": "Provide the names and IATA codes of airports.", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Provide the names and IATA codes of airports.", "masked_cypher": "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.iata_code", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Character)-[r0:diedIn]->(m0:Location),(n:Character)-[r1:bornIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty),(n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Airport) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.iata_code", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.iata_code DESC", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident), (n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident), (n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.iata_code DESC LIMIT 1", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident), (n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident), (n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.icao_code"], "label": 10}
{"qid": "d83aaaaf-508f-42df-9911-f4b60dd40e65", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident {name: 'FlyMontserrat Flight 107'}) WITH DISTINCT n RETURN n.number_of_survivors", "nl_question": "How many survivors were there from FlyMontserrat Flight 107?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "How many survivors were there from [LITERAL]?", "masked_cypher": "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_survivors", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.location", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.date", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_survivors - m0.number_of_survivors AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_survivors = m0.number_of_survivors AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_survivors - m0.number_of_survivors AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_survivors = m0.number_of_survivors AS answer", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:FlightAccident) WITH DISTINCT n RETURN COUNT(DISTINCT n.number_of_survivors)", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.number_of_survivors)", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator)<-[r1:operatedBy]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator)<-[r1:operatedBy]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n RETURN n.name, n.number_of_survivors"], "label": 4}
{"qid": "11305436-476f-4e74-bbe4-7468a16cd68f", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of airports from which flight accidents have departed?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of airports from which flight accidents have departed?", "masked_cypher": "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries != [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries > [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries != [LITERAL] RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries != [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries <= [LITERAL] RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries <= [LITERAL] RETURN n.name"], "label": 6}
{"qid": "17e8847e-ae80-450c-b7b0-e13a4fa94dcd", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftManufacturer {name: 'Ulan-Ude Aviation Plant'}) WITH DISTINCT n RETURN n.country", "nl_question": "Which country is home to the Ulan-Ude Aviation Plant?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "Which country is home to the [LITERAL]?", "masked_cypher": "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie {name: '[LITERAL]'}),(n:ProductionCompany)<-[r1:producedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident),(n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.country"], "candidates": ["MATCH (n:AircraftManufacturer) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.country)", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN MAX(n.country)", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.country != '[LITERAL]' RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.country > '[LITERAL]' RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.country >= '[LITERAL]' RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.country <= '[LITERAL]' RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.country < '[LITERAL]' RETURN n.name", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.country = '[LITERAL]' RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN MIN(n.country)", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country"], "label": 13}
{"qid": "168ce5e4-8b46-4a7a-a080-66f58fa95bd3", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident {name: 'Emirates Flight 521'}) WITH DISTINCT n RETURN n.date", "nl_question": "When did the Emirates Flight 521 accident occur?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "When did the [LITERAL] accident occur?", "masked_cypher": "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.date", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.location", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_survivors", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident) WITH DISTINCT n RETURN n.name, n.date", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport),(n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN CASE WHEN n.date > m0.date THEN n.name ELSE m0.name END AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN CASE WHEN n.date > m0.date THEN n.name ELSE m0.name END AS answer", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date ASC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date = date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.date", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date >= date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date != date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date <= date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date = date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date < date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.date >= date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.date <= date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.date < date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.date = date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date ASC LIMIT 1"], "label": 6}
{"qid": "3f7e1fa9-c3f5-462d-8f8f-9da98dd461a3", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport {name: 'Girona-Costa Brava Airport'}) WITH DISTINCT n RETURN n.country", "nl_question": "Which country is Girona-Costa Brava Airport located in?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "Which country is [LITERAL] located in?", "masked_cypher": "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.icao_code", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.icao_code", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.iata_code", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country"], "candidates": ["MATCH (n:Airport {name: '[LITERAL]'}), (m0:Airport {name: '[LITERAL]'}) RETURN CASE WHEN n.iata_code > m0.country THEN n.name ELSE m0.name END AS answer", "MATCH (n:Airport {name: '[LITERAL]'}), (m0:Airport {name: '[LITERAL]'}) RETURN CASE WHEN n.iata_code >= m0.country THEN n.name ELSE m0.name END AS answer", "MATCH (n:Airport {name: '[LITERAL]'}), (m0:Airport {name: '[LITERAL]'}) RETURN CASE WHEN n.iata_code <= m0.country THEN n.name ELSE m0.name END AS answer", "MATCH (n:Airport) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN COUNT(DISTINCT n.country)", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.country)", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.country = '[LITERAL]' RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1"], "label": 4}
{"qid": "8d050038-4e73-43e4-ad18-0b7ee1a137c2", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of different aircraft models?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of different aircraft models?", "masked_cypher": "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.length_metre != [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.length_metre > [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.length_metre >= [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name, n.length_metre", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.range_km != [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.range_km > [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.length_metre <= [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.length_metre < [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.range_km >= [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.length_metre = [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_metre = [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.range_km <= [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.range_km < [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.range_km = [LITERAL] RETURN n.name", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name, n.range_km", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n WHERE n.length_metre != [LITERAL] RETURN n.name"], "label": 11}
{"qid": "ab2ad73f-ea17-4f7c-89fd-08c6b9933acd", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftManufacturer {name: 'Novosibirsk Aircraft Production Association'}) WITH DISTINCT n RETURN n.country", "nl_question": "Which country is home to the Novosibirsk Aircraft Production Association?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "Which country is home to the [LITERAL]?", "masked_cypher": "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie {name: '[LITERAL]'}),(n:ProductionCompany)<-[r1:producedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident),(n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.country"], "candidates": ["MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN COUNT(DISTINCT n.country)", "MATCH (n:AircraftManufacturer) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC LIMIT 1", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN MAX(n.country)", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN MIN(n.country)", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1"], "label": 12}
{"qid": "93567b31-fda0-4b63-a0dc-abe3da0ce29c", "graph": "flight_accident", "gold_cypher": "MATCH (n:Operator) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of the operators?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of the operators?", "masked_cypher": "MATCH (n:Operator) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Operator {name: '[LITERAL]'}), (m0:Operator {name: '[LITERAL]'}) RETURN n.name = m0.name AS answer", "MATCH (n:Operator) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Operator)<-[r1:operatedBy]-(m1:FlightAccident {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Operator)<-[r1:operatedBy]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 2}
{"qid": "7b450f61-fad7-4ca7-b408-1a6ebdfc098a", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport {name: 'Iwakuni Air Base'}) WITH DISTINCT n RETURN n.icao_code", "nl_question": "What is the ICAO code for Iwakuni Air Base?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the ICAO code for [LITERAL]?", "masked_cypher": "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.icao_code", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n WHERE n.icao_code <> '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Airport) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident), (n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident), (n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code"], "label": 3}
{"qid": "99313abe-e20b-400f-8904-7981cdeca370", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "nl_question": "What are the names of aircraft models, sorted by wingspan in meters from smallest to largest?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of aircraft models, sorted by wingspan in meters from smallest to largest?", "masked_cypher": "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country),(n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician),(n:Country)-[r1:hasHeadOfState]->(m0:Politician) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country),(n:Movie)-[r1:releasedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1"], "candidates": ["MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC LIMIT 1", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC LIMIT 1", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC LIMIT 1", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC LIMIT 1", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC LIMIT 1", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC LIMIT 1", "MATCH (n:AircraftModel) WITH DISTINCT n WHERE n.wingspan_metre < [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC LIMIT 1", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC LIMIT 1", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre DESC LIMIT 1", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.wingspan_metre)", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN MIN(n.wingspan_metre)"], "label": 6}
{"qid": "df049c23-0a66-4290-a8ab-7d1ac1969705", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: 'Samui Airport'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "nl_question": "What is the name of the flight accident headed to Samui Airport that had the fewest survivors?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "What is the name of the flight accident headed to [LITERAL] that had the fewest survivors?", "masked_cypher": "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.first_flight ASC LIMIT 1", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.elevation_m ASC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.range_km ASC LIMIT 1"], "candidates": ["MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.number_of_survivors)", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.number_of_survivors)", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN MIN(n.number_of_survivors)", "MATCH (n:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC LIMIT 1", "MATCH (n:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC LIMIT 1", "MATCH (n:FlightAccident) WITH DISTINCT n RETURN MIN(n.number_of_survivors)"], "label": 10}
{"qid": "da5ce835-6066-4424-a009-0fa57d5f9f63", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: 'Dash 7'}) WITH DISTINCT n RETURN n.name, n.location", "nl_question": "What are the names and locations of aviation accidents involving the Dash 7 aircraft model?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and locations of aviation accidents involving the [LITERAL] aircraft model?", "masked_cypher": "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.location", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.flight_number", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "CALL { MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.date = date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.date < date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.location DESC", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.location != '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.location >= '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.location > '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.location <= '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.location < '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_survivors != [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.location <= '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.location < '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.location = '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_deaths <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_survivors > [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_deaths < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_survivors <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_survivors < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_survivors = [LITERAL] RETURN n.name"], "label": 15}
{"qid": "0deee737-e2e5-40d3-a188-c54bdfd5a268", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftManufacturer {name: 'Novosibirsk Aircraft Production Association'}) WITH DISTINCT n RETURN n.launch_year", "nl_question": "What year did the Novosibirsk Aircraft Production Association launch?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What year did the [LITERAL] launch?", "masked_cypher": "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:AircraftManufacturer) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN MIN(n.launch_year)", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name"], "label": 11}
{"qid": "f34ae1cf-d0b9-4e6f-851e-9df9662a6f07", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "nl_question": "What are the names and locations of airports from which flight accidents have departed?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and locations of airports from which flight accidents have departed?", "masked_cypher": "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.location", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Character)-[r0:diedIn]->(m0:Location),(n:Character)-[r1:bornIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty),(n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries != [LITERAL] RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries != [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries != [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name"], "label": 8}
{"qid": "75235715-7599-4a36-ae17-f1f3ad87360a", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftModel {name: 'B-25 Mitchell'}), (m0:AircraftModel {name: 'Airbus A340'}) RETURN n.range_km - m0.range_km AS answer", "nl_question": "What is the difference in range, in kilometers, between the B-25 Mitchell and the Airbus A340?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in range, in kilometers, between the [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.range_km AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.range_km > m0.range_km THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.range_km > m0.range_km THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.height_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.wingspan_metre - m0.wingspan_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.wingspan_metre - m0.wingspan_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.height_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.wingspan_metre > m0.wingspan_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.length_metre > m0.length_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.length_metre > m0.length_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.height_metre > m0.height_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.first_flight > m0.first_flight THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.first_flight > m0.first_flight THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.wingspan_metre > m0.wingspan_metre THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.height_metre - n.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.range_km - n.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.range_km - n.height_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.range_km - n.wingspan_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.wingspan_metre AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.wingspan_metre - n.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.wingspan_metre - m0.range_km AS answer", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.range_km", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km = m0.wingspan_metre AS answer", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.first_flight - m0.range_km AS answer", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}),(n:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident {name: '[LITERAL]'}),(n:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.range_km)", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.first_flight - n.range_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.range_km", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.range_km DESC", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN m0.range_km - n.first_flight AS answer"], "label": 1}
{"qid": "737ff3ee-a333-4c81-9f60-5a60eae0ed87", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: 'Zvartnots International Airport'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "nl_question": "What are the names of aviation accidents that departed from Zvartnots International Airport, along with the number of survivors in each?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names of aviation accidents that departed from [LITERAL], along with the number of survivors in each?", "masked_cypher": "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN max(n.number_of_deaths)", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.flight_number", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "CALL { MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator"], "candidates": ["MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors >= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors > [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport), (n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport), (n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident) WITH DISTINCT n RETURN n.name, n.number_of_survivors"], "label": 4}
{"qid": "76fff9e8-22e8-4ea4-84ee-5b4a6b4b3ecd", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: 'ATR 72'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: 'Kinmen Airport'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "nl_question": "What are the names of aviation accidents involving the ATR 72 aircraft that were headed to Kinmen Airport, along with the number of survivors in each incident?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names of aviation accidents involving the [LITERAL] aircraft that were headed to [LITERAL], along with the number of survivors in each incident?", "masked_cypher": "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.flight_number", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "CALL { MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "candidates": ["MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator)<-[r1:operatedBy]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n RETURN DISTINCT n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n WHERE n.number_of_survivors < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident) WITH DISTINCT n RETURN n.name, n.number_of_survivors"], "label": 9}
{"qid": "f15ff5e2-410d-4c32-b354-840affddc3ca", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "nl_question": "What are the names and locations of airports that were the intended destinations of flight accidents?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and locations of airports that were the intended destinations of flight accidents?", "masked_cypher": "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n WHERE n.icao_code <> '[LITERAL]' RETURN n.name", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.location", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Character)-[r0:diedIn]->(m0:Location),(n:Character)-[r1:bornIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty),(n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.location DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN DISTINCT n.location", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_deaths != [LITERAL] RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors != [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries != [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_survivors", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_deaths = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_deaths < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries <= [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_survivors < [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.number_of_injuries < [LITERAL] RETURN n.name"], "label": 3}
{"qid": "d431f2e3-a1a1-4706-952e-e4e29853442f", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of the airports?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of the airports?", "masked_cypher": "MATCH (n:Airport) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Airport) WITH DISTINCT n WHERE n.icao_code = '[LITERAL]' RETURN n.name", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport) WITH DISTINCT n WHERE n.location > '[LITERAL]' RETURN n.name", "MATCH (n:Airport) WITH DISTINCT n WHERE n.location >= '[LITERAL]' RETURN n.name", "MATCH (n:Airport) WITH DISTINCT n WHERE n.location != '[LITERAL]' RETURN n.name", "MATCH (n:Airport) WITH DISTINCT n WHERE n.location <= '[LITERAL]' RETURN n.name", "MATCH (n:Airport) WITH DISTINCT n WHERE n.location < '[LITERAL]' RETURN n.name", "MATCH (n:Airport) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport) WITH DISTINCT n WHERE n.location = '[LITERAL]' RETURN n.name", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.location", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.name"], "label": 8}
{"qid": "b6dd3572-7ad6-4813-918d-915c4c34cf4e", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: 'Francisco Bangoy International Airport'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: 'Boeing 737'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "nl_question": "What are the names and death tolls of aviation accidents involving a Boeing 737 that were headed to Francisco Bangoy International Airport?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and death tolls of aviation accidents involving a [LITERAL] that were headed to [LITERAL]?", "masked_cypher": "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.flight_number", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date.year = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "CALL { MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_deaths = m0.number_of_deaths AS answer"], "candidates": ["MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths ASC", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths ASC", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator)<-[r1:operatedBy]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}),(n:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}),(n:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths", "MATCH (n:FlightAccident)-[r0:involves]->(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_deaths"], "label": 13}
{"qid": "c35d9fa7-690b-4573-b027-f0a5e510ce2b", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport {name: 'Girona-Costa Brava Airport'}) WITH DISTINCT n RETURN n.icao_code", "nl_question": "What is the ICAO code for Girona-Costa Brava Airport?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the ICAO code for [LITERAL]?", "masked_cypher": "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.icao_code", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n WHERE n.icao_code <> '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Airport) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident), (n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident), (n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident), (n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code"], "label": 7}
{"qid": "1da3b437-281e-42dc-9dac-f617d2f50859", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: 'S-92'}) WITH DISTINCT n RETURN n.name", "nl_question": "Who are the manufacturers of the S-92 aircraft model?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "Who are the manufacturers of the [LITERAL] aircraft model?", "masked_cypher": "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}),(n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "CALL { MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.range_km AS prop RETURN DISTINCT prop", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.range_km AS prop RETURN DISTINCT prop", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.range_km ASC", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.length_metre = [LITERAL] RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.range_km = [LITERAL] RETURN n.name"], "label": 8}
{"qid": "9af6d17e-0214-4cb4-8a66-635230fd7813", "graph": "flight_accident", "gold_cypher": "MATCH (n:FlightAccident {name: 'Emirates Flight 521'}) WITH DISTINCT n RETURN n.number_of_injuries", "nl_question": "How many injuries were reported in the Emirates Flight 521 incident?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "How many injuries were reported in the [LITERAL] incident?", "masked_cypher": "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_injuries", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.location", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_survivors", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.date", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_injuries = m0.number_of_injuries AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_injuries - m0.number_of_injuries AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_injuries = m0.number_of_injuries AS answer", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries DESC", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport),(n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN CASE WHEN n.number_of_injuries > m0.number_of_injuries THEN n.name ELSE m0.name END AS answer", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.number_of_injuries)", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.number_of_injuries)", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.number_of_injuries)", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.number_of_injuries", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries DESC LIMIT 1", "MATCH (n:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.number_of_injuries"], "label": 19}
{"qid": "400c8b2a-d232-41d9-b568-13d654523b2b", "graph": "flight_accident", "gold_cypher": "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "nl_question": "Who is the operator with the earliest launch year?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Who is the operator with the earliest launch year?", "masked_cypher": "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician),(n:Country)-[r1:hasHeadOfState]->(m0:Politician) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country),(n:Movie)-[r1:releasedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country),(n:Movie)-[r1:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person),(n:Movie)-[r1:writtenBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1"], "candidates": ["MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN MAX(n.launch_year)", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.launch_year)", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.launch_year)", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Operator) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Operator) WITH DISTINCT n RETURN MAX(n.launch_year)", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident) WITH DISTINCT n RETURN MIN(n.launch_year)", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.launch_year)", "MATCH (n:Operator) WITH DISTINCT n RETURN MIN(n.launch_year)", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.launch_year)"], "label": 13}
{"qid": "c54b9f25-1d3b-4df6-88e8-bd37b9eb305e", "graph": "flight_accident", "gold_cypher": "MATCH (n:AircraftManufacturer {name: 'Ulan-Ude Aviation Plant'}) WITH DISTINCT n RETURN n.launch_year", "nl_question": "What year was the Ulan-Ude Aviation Plant launched?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What year was the [LITERAL] launched?", "masked_cypher": "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:AircraftManufacturer) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)-[r1:manufacturedBy]->(m1:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:AircraftManufacturer) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel)<-[r1:involves]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name"], "label": 13}
{"qid": "c81fbb3e-741c-49b1-a940-6e081ba1842b", "graph": "flight_accident", "gold_cypher": "MATCH (n:Airport {name: 'Iwakuni Air Base'}) WITH DISTINCT n RETURN n.iata_code", "nl_question": "What is the IATA code for Iwakuni Air Base?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the IATA code for [LITERAL]?", "masked_cypher": "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.iata_code", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.icao_code", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator"], "candidates": ["MATCH (n:Airport) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident), (n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident), (n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:departsFrom]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.iata_code", "MATCH (n:Airport) WITH DISTINCT n RETURN n.name, n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}),(n:Airport)<-[r1:destinedFor]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.icao_code", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:involves]->(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.iata_code", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.iata_code"], "label": 6}
{"qid": "0c6b199c-1cbb-46f0-8f12-0faa0c0d1e63", "graph": "politics", "gold_cypher": "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: 'Marshall Islands'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of international organizations that include countries having diplomatic relations with the Marshall Islands, and how many such countries are members of each organization?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of international organizations that include countries having diplomatic relations with the [LITERAL], and how many such countries are members of each organization?", "masked_cypher": "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)", "CALL { MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "label": 12}
{"qid": "ad7e2f9f-87a7-46f4-a927-dfd13f21a39e", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: 'Socialist Party'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "nl_question": "What are the unique official languages of countries that have diplomatic relations with countries where the Socialist Party is active?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_prop_array_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n UNWIND n.${prop} AS prop RETURN DISTINCT prop"}, "masked_question": "What are the unique official languages of countries that have diplomatic relations with countries where the [LITERAL] is active?", "masked_cypher": "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician),(n:Country)-[r1:hasHeadOfGovernment]->(m0:Politician) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.occupation AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse)<-[r1:fromUniverse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.occupation AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.occupation AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.nicknames AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop"], "candidates": ["MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.official_language)", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language"], "label": 4}
{"qid": "8733482c-e077-45ce-bb3d-160a43ba2f04", "graph": "politics", "gold_cypher": "MATCH (n:InternationalOrganization {name: 'ANZUS'}) WITH DISTINCT n RETURN n.founding_year", "nl_question": "When was ANZUS founded?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "When was [LITERAL] founded?", "masked_cypher": "MATCH (n:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n.founding_year - m0.founding_year AS answer", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n.founding_year = m0.founding_year AS answer", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n.founding_year - m0.founding_year AS answer", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_year > m0.founding_year THEN n.name ELSE m0.name END AS answer", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator"], "candidates": ["MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN DISTINCT n.founding_year", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN MAX(n.founding_year)", "MATCH (n:Country) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year >= [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN MIN(n.founding_year)", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name, n.founding_year", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year > [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_year", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:Country) WITH DISTINCT n RETURN MIN(n.founding_date)", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year < [LITERAL] RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.founding_date"], "label": 15}
{"qid": "5dfb9d49-b152-4c83-a0ee-f31d252ab290", "graph": "politics", "gold_cypher": "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: 'Italy'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of positions that head government organizations in Italy?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of positions that head government organizations in [LITERAL]?", "masked_cypher": "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position)-[r1:leads]->(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "CALL { MATCH (n:Position)-[r0:leads]->(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name"], "label": 15}
{"qid": "f1a5fdcd-6ef8-4039-9740-6623c3a8619f", "graph": "politics", "gold_cypher": "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: 'Party of Regions'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of positions held by politicians from the Party of Regions, and how many such politicians have held each position?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of positions held by politicians from the [LITERAL], and how many such politicians have held each position?", "masked_cypher": "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "CALL { MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:foundedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician), (n:PoliticalParty)<-[r1:memberOf]-(m0:Politician) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "CALL { MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician), (n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)"], "label": 6}
{"qid": "4157c880-a169-43fb-92f7-dd9416ea14c5", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: 'World Meteorological Organization'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all countries that are members of the World Meteorological Organization, along with the number of countries each has diplomatic relations with.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all countries that are members of the [LITERAL], along with the number of countries each has diplomatic relations with.", "masked_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "CALL { MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "label": 19}
{"qid": "c3a34396-5364-42a7-be63-8b3701a1308f", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: 'Lithuania'}) WITH DISTINCT n RETURN n.name, n.gender", "nl_question": "Who are the politicians that Lithuania has had as head of state, and what is their gender?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Who are the politicians that [LITERAL] has had as head of state, and what is their gender?", "masked_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfGovernment]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender"], "candidates": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE n.gender >= '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE n.gender > '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE n.gender <= '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender >= '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender > '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender <= '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE n.gender = '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.gender DESC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.gender DESC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender = '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.gender ASC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.gender ASC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender"], "label": 19}
{"qid": "97b9feb6-6e91-42cd-929b-60c89d4eec08", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: 'United States of America'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "nl_question": "Provide the names of politicians who have been heads of state of the United States of America at any time, along with the schools they attended.", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Provide the names of politicians who have been heads of state of the [LITERAL] at any time, along with the schools they attended.", "masked_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfGovernment]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name"], "candidates": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended"], "label": 16}
{"qid": "25bb2717-63ed-42f7-853e-12e615a76da1", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: 'International Telecommunication Union'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: 'Government & Institutionals Relations ministry of Generalitat de Catalunya'}) WITH DISTINCT n RETURN n.name, n.official_language", "nl_question": "What are the names and official languages of countries that are members of the International Telecommunication Union and that the Government & Institutionals Relations ministry of Generalitat de Catalunya belongs to?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and official languages of countries that are members of the [LITERAL] and that the [LITERAL] belongs to?", "masked_cypher": "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language"], "candidates": ["MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.official_language)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.official_language)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.official_language DESC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.official_language DESC", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.official_language ASC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.official_language ASC", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.official_language RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.official_language DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.official_language RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "CALL { MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name"], "label": 11}
{"qid": "e7ec2afb-dea4-45f2-a909-604cfba33830", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: 'International Bank for Reconstruction and Development'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of countries that have diplomatic relations with nations belonging to the International Bank for Reconstruction and Development, and for each, provide the count of such countries they are diplomatically connected with.", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of countries that have diplomatic relations with nations belonging to the [LITERAL], and for each, provide the count of such countries they are diplomatically connected with.", "masked_cypher": "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "label": 15}
{"qid": "9c8ccca7-20f2-4968-9bf9-1baf24760391", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: 'The Republicans'}) WITH DISTINCT n RETURN n.name, n.place_of_death", "nl_question": "What are the names and places of death of politicians who headed The Republicans at some point?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and places of death of politicians who headed [LITERAL] at some point?", "masked_cypher": "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_death", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_death", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty)-[r1:headedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date_of_birth", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfState]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date_of_death", "CALL { MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Politician)<-[r1:hasHeadOfState]-(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Politician)<-[r1:foundedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) WHERE r0.start_year <= [LITERAL] AND (r0.end_year >= [LITERAL] OR r0.end_year IS NULL) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.date_of_death", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty), (n:Politician)-[r1:memberOf]->(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.place_of_death", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_death ASC", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.place_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty), (n:Politician)-[r1:memberOf]->(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)-[r1:memberOf]->(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.place_of_death", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_death"], "label": 19}
{"qid": "3729d07a-dad3-471b-94c4-db76b79e4a91", "graph": "politics", "gold_cypher": "MATCH (n:InternationalOrganization {name: 'Digital 9'}) WITH DISTINCT n RETURN n.founding_year", "nl_question": "When was Digital 9 founded?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "When was [LITERAL] founded?", "masked_cypher": "MATCH (n:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n.founding_year - m0.founding_year AS answer", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n.founding_year = m0.founding_year AS answer", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n.founding_year - m0.founding_year AS answer", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_year > m0.founding_year THEN n.name ELSE m0.name END AS answer", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator"], "candidates": ["MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year >= [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year > [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_year", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.founding_date)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_year", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.founding_year)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.founding_date)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.founding_date)", "MATCH (n:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.founding_year)", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.founding_date)", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.founding_date)"], "label": 2}
{"qid": "979dbd07-3b53-4e44-8c85-2861eb2e0ffb", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: 'Organization for Security and Co-operation in Europe'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all countries that are members of the Organization for Security and Co-operation in Europe, along with the number of politicians who have served as their head of government at any time.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all countries that are members of the [LITERAL], along with the number of politicians who have served as their head of government at any time.", "masked_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date < date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date < date('[LITERAL]') RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_year >= [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_year > [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_year <= [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_year < [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_year = [LITERAL] RETURN n.name"], "label": 11}
{"qid": "c5dc2efd-ea64-4cce-b0d2-c4084f3a31cc", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "nl_question": "What are the unique genders of politicians who have served as heads of government for any country, either currently or in the past?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique genders of politicians who have served as heads of government for any country, either currently or in the past?", "masked_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty),(n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:writtenBy]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.gender)", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN MAX(n.gender)", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.gender DESC", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.gender ASC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.gender DESC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender <= '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "label": 3}
{"qid": "f14d7bb1-ea36-4909-8ecb-8807705700df", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "nl_question": "What are the unique official languages of countries that are members of an international organization?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_prop_array_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n UNWIND n.${prop} AS prop RETURN DISTINCT prop"}, "masked_question": "What are the unique official languages of countries that are members of an international organization?", "masked_cypher": "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician),(n:Country)-[r1:hasHeadOfGovernment]->(m0:Politician) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie),(n:Person)<-[r1:directedBy]-(m0:Movie) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country),(n:Movie)-[r1:originatesFrom]->(m0:Country) WITH DISTINCT n UNWIND n.filming_location AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie),(n:Person)<-[r1:writtenBy]-(m0:Movie) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop"], "candidates": ["MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN MAX(n.official_language)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.official_language DESC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.official_language DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN MIN(n.official_language)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language"], "label": 0}
{"qid": "9cc9a70d-62c0-4320-bc63-8ec905245cd9", "graph": "politics", "gold_cypher": "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: 'Romania'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of government organizations in Romania?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of government organizations in [LITERAL]?", "masked_cypher": "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}),(n:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:GovernmentOrganization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 14}
{"qid": "4d8e20df-1022-4715-ad92-539fce04e269", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "nl_question": "Provide the names of politicians who have been heads of government for any country, along with the schools they attended.", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Provide the names of politicians who have been heads of government for any country, along with the schools they attended.", "masked_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name"], "candidates": ["MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfGovernment]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended"], "label": 9}
{"qid": "14d94ede-723e-40c2-95ad-34dc7d12bb77", "graph": "politics", "gold_cypher": "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: 'United Arab Emirates'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of international organizations that include countries having diplomatic relations with the United Arab Emirates, and how many such countries are members of each organization?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of international organizations that include countries having diplomatic relations with the [LITERAL], and how many such countries are members of each organization?", "masked_cypher": "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.official_language)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)"], "label": 12}
{"qid": "9e1c1f26-0b02-4b68-b88a-a00095480a8e", "graph": "politics", "gold_cypher": "MATCH (n:Country {name: 'South Korea'}) WITH DISTINCT n RETURN n.founding_date", "nl_question": "When was South Korea founded?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "When was [LITERAL] founded?", "masked_cypher": "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.official_language", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician)<-[r1:hasHeadOfState]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician)<-[r1:foundedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date"], "candidates": ["MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.founding_date - n.name AS answer", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date != date('[LITERAL]') RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN m0.name - n.founding_date AS answer", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.founding_date = m0.founding_date AS answer", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date < date('[LITERAL]') RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.name = m0.founding_date AS answer", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.founding_date = m0.name AS answer", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date"], "label": 12}
{"qid": "c5460e0f-083c-4f43-afc7-b407d9a27eeb", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: 'United Nations Conference on Trade and Development'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of countries that are members of the United Nations Conference on Trade and Development, along with the number of politicians who have served as their head of government at any time.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of countries that are members of the [LITERAL], along with the number of politicians who have served as their head of government at any time.", "masked_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN COUNT(DISTINCT n.country_of_citizenship)", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician), (n:Country)-[r1:hasHeadOfGovernment]->(m0:Politician) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date < date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date < date('[LITERAL]') RETURN n.name"], "label": 7}
{"qid": "5725c0f4-3ff6-4e19-9045-096810fe8388", "graph": "politics", "gold_cypher": "MATCH (n:Country {name: 'South Korea'}) WITH DISTINCT n RETURN n.official_language", "nl_question": "What is the official language of South Korea?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is the official language of [LITERAL]?", "masked_cypher": "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.official_language", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.capital", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.area_km2", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language"], "candidates": ["MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.official_language = m0.official_language AS answer", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.official_language = m0.name AS answer", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.official_language)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.official_language)", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.official_language)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language"], "label": 1}
{"qid": "dbc0c1b7-68ff-4c3e-a357-fe6769b585ff", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "nl_question": "What are the unique genders of politicians who have been associated with countries as heads of state, either currently or in the past?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique genders of politicians who have been associated with countries as heads of state, either currently or in the past?", "masked_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty),(n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:writtenBy]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN MAX(n.gender)", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender"], "label": 3}
{"qid": "63316feb-124a-4022-8dd5-a144e1714d9c", "graph": "politics", "gold_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.official_language", "nl_question": "What are the names of countries along with their official languages?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names of countries along with their official languages?", "masked_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.official_language", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.official_language", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician),(n:Country)-[r1:hasHeadOfGovernment]->(m0:Politician) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language"], "candidates": ["MATCH (n:Country) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.official_language RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.official_language"], "label": 4}
{"qid": "a03f2796-a714-4754-b907-a50730cbb868", "graph": "politics", "gold_cypher": "CALL { MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: 'Mali'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: 'North American Free Trade Agreement'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "nl_question": "How many countries either have diplomatic relations with Mali or are members of the North American Free Trade Agreement?", "from_template": {"match_category": "special_union", "match_cypher": "CALL { MATCH (n)-[r0]->(m0<name>) RETURN n, m0 as m UNION MATCH (n)-[r1]->(m1<name>) RETURN n, m1 as m }", "return_pattern_id": "n_union_count", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN count(n)"}, "masked_question": "How many countries either have diplomatic relations with [LITERAL] or are members of the [LITERAL]?", "masked_cypher": "CALL { MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "negative_cypher": [], "hard_negative_cypher": ["CALL { MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Award)<-[r0:receivesAward]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Award)<-[r1:receivesAward]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)<-[r0:killedBy]-(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "candidates": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "CALL { MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "label": 19}
{"qid": "59158762-4504-43fe-97c0-680bfd4ea81d", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "nl_question": "What are the unique genders of politicians who have founded a political party?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique genders of politicians who have founded a political party?", "masked_cypher": "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN max(n.date_of_birth.year)", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty),(n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:writtenBy]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN COUNT(DISTINCT n.gender)", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)-[r1:memberOf]->(m0:PoliticalParty) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name ORDER BY n.gender DESC", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)-[r1:memberOf]->(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name ORDER BY n.gender ASC LIMIT 1", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name ORDER BY n.gender DESC LIMIT 1", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty), (n:Politician)<-[r1:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.gender"], "label": 2}
{"qid": "f7a12842-243f-462e-93a8-b454d9866a83", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "nl_question": "Which country that is a member of an international organization was founded most recently?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Which country that is a member of an international organization was founded most recently?", "masked_cypher": "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician),(n:Country)-[r1:hasHeadOfState]->(m0:Politician) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1"], "candidates": ["MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n WHERE n.founding_date != date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n WHERE n.founding_date < date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN MIN(n.founding_date)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN MAX(n.founding_year)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN MIN(n.founding_year)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.founding_date)"], "label": 12}
{"qid": "c0671019-5d28-45e8-a53d-c8c209efc092", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: 'International Criminal Court'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of countries that are members of the International Criminal Court, along with the count of government organizations associated with each.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of countries that are members of the [LITERAL], along with the count of government organizations associated with each.", "masked_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)", "MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "label": 19}
{"qid": "fd48f31b-7f0c-4041-bb6a-cb9be632ca84", "graph": "politics", "gold_cypher": "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: 'Marshall Islands'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Identify the international organizations that have member countries maintaining diplomatic relations with the Marshall Islands, and specify the number of such countries for each organization.", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Identify the international organizations that have member countries maintaining diplomatic relations with the [LITERAL], and specify the number of such countries for each organization.", "masked_cypher": "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_year)"], "label": 15}
{"qid": "3c90d192-9318-44d6-b973-3a1cf6d768dd", "graph": "politics", "gold_cypher": "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "nl_question": "What is the name of the most recently founded international organization?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "What is the name of the most recently founded international organization?", "masked_cypher": "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:River)-[r0:partOf]->(m0:DrainageBasin)<-[r1:partOf]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC LIMIT 1"], "candidates": ["MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC LIMIT 1", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year > [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN MAX(n.founding_year)", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year < [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN MIN(n.founding_year)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN MAX(n.founding_year)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN MIN(n.founding_year)"], "label": 3}
{"qid": "79ef92dd-ed74-4c91-a6ca-a382159827d3", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: 'International Bank for Reconstruction and Development'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Which countries have diplomatic relations with nations that are members of the International Bank for Reconstruction and Development, and how many such member countries does each of them have relations with?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Which countries have diplomatic relations with nations that are members of the [LITERAL], and how many such member countries does each of them have relations with?", "masked_cypher": "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 12}
{"qid": "2343844c-9b8a-4c12-aa1a-06b2cd59aa26", "graph": "politics", "gold_cypher": "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "nl_question": "What are the names of international organizations, sorted by their founding year from the earliest to the latest?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of international organizations, sorted by their founding year from the earliest to the latest?", "masked_cypher": "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Ocean)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:AircraftModel) WITH DISTINCT n RETURN n.name ORDER BY n.wingspan_metre ASC", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country),(n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician),(n:Country)-[r1:hasHeadOfState]->(m0:Politician) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country),(n:Movie)-[r1:releasedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1"], "candidates": ["MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC LIMIT 1", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year > [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year <= [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization) WITH DISTINCT n WHERE n.founding_year < [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n WHERE n.founding_year > [LITERAL] RETURN n.name", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name, n.founding_year", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year ASC LIMIT 1", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1"], "label": 0}
{"qid": "d8eef748-fe51-4a14-b999-bf17cd22090e", "graph": "politics", "gold_cypher": "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: 'United Arab Emirates'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of international organizations that have member countries maintaining diplomatic relations with the United Arab Emirates, and how many such countries are members of each organization?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of international organizations that have member countries maintaining diplomatic relations with the [LITERAL], and how many such countries are members of each organization?", "masked_cypher": "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.official_language)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)"], "label": 12}
{"qid": "d0ad3703-eb0c-477c-ad01-34c9efb2a683", "graph": "politics", "gold_cypher": "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: 'President\\'s Secretariat'}) WITH DISTINCT n RETURN n.name, n.official_language", "nl_question": "What is the name and official language of the country to which the President's Secretariat belongs?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What is the name and official language of the country to which the [LITERAL] belongs?", "masked_cypher": "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language"], "candidates": ["MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.official_language ASC", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.official_language", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.official_language"], "label": 7}
{"qid": "bcd75063-a788-4768-8bcb-4be026b4bee9", "graph": "politics", "gold_cypher": "MATCH (n:Country {name: 'Singapore'}), (m0:Country {name: 'Nauru'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "nl_question": "Which country was founded later, Singapore or Nauru?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_argmax", "return_cypher": "${match_cypher} RETURN CASE WHEN n.${prop} > m0.${prop} THEN n.name ELSE m0.name END AS answer"}, "masked_question": "Which country was founded later, [LITERAL] or [LITERAL]?", "masked_cypher": "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:PoliticalParty {name: '[LITERAL]'}), (m0:PoliticalParty {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:PoliticalParty {name: '[LITERAL]'}), (m0:PoliticalParty {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.wingspan_metre > m0.wingspan_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.length_metre > m0.length_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:Company {name: '[LITERAL]'}), (m0:Company {name: '[LITERAL]'}) RETURN CASE WHEN n.launch_year > m0.launch_year THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.length_metre > m0.length_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN CASE WHEN n.date_of_death > m0.date_of_death THEN n.name ELSE m0.name END AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:DrainageBasin {name: '[LITERAL]'}), (m0:DrainageBasin {name: '[LITERAL]'}) RETURN CASE WHEN n.area_km2 > m0.area_km2 THEN n.name ELSE m0.name END AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN CASE WHEN n.date_of_birth > m0.date_of_birth THEN n.name ELSE m0.name END AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN CASE WHEN n.mass_kg > m0.mass_kg THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN CASE WHEN n.height_metre > m0.height_metre THEN n.name ELSE m0.name END AS answer", "MATCH (n:River {name: '[LITERAL]'}), (m0:River {name: '[LITERAL]'}) RETURN CASE WHEN n.length_km > m0.length_km THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:Country) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date != date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date > m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.founding_date < m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN CASE WHEN n.name > m0.founding_date THEN n.name ELSE m0.name END AS answer", "MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.founding_date = m0.founding_date AS answer", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date < date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:Country) WITH DISTINCT n RETURN MIN(n.founding_date)"], "label": 5}
{"qid": "5389435d-c1d2-41cb-8ab3-24e65efb9921", "graph": "politics", "gold_cypher": "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: 'Ministry of Economy, Development and Tourism'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: 'Ministry of National Defence'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "nl_question": "How many countries have either the Ministry of Economy, Development and Tourism or the Ministry of National Defence?", "from_template": {"match_category": "special_union", "match_cypher": "CALL { MATCH (n)<-[r0]-(m0<name>) RETURN n, m0 as m UNION MATCH (n)<-[r1]-(m1<name>) RETURN n, m1 as m }", "return_pattern_id": "n_union_count", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN count(n)"}, "masked_question": "How many countries have either the [LITERAL] or the [LITERAL]?", "masked_cypher": "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "negative_cypher": [], "hard_negative_cypher": ["CALL { MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Award)<-[r0:receivesAward]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Award)<-[r1:receivesAward]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)<-[r0:killedBy]-(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Position)<-[r0:playsPosition]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Position)<-[r1:playsPosition]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "candidates": ["MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.official_language)", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.founding_date)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}),(n:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "label": 13}
{"qid": "03dd2725-81a0-45c6-8ba0-c37984eb2628", "graph": "politics", "gold_cypher": "MATCH (n:PoliticalParty {name: 'Socialist Party of Chile'}) WITH DISTINCT n RETURN n.founding_date", "nl_question": "When was the Socialist Party of Chile founded?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "When was the [LITERAL] founded?", "masked_cypher": "MATCH (n:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician)<-[r1:hasHeadOfState]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)<-[r0:memberOf]-(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician)<-[r1:foundedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician)-[r1:holdsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date"], "candidates": ["MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.founding_date", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.founding_date", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1"], "label": 1}
{"qid": "26c27053-3b62-4bd1-8841-ecb30cdec22a", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: 'United States of America'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "nl_question": "Who are the politicians who have been head of state of the United States of America at any time, and what are their countries of citizenship?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Who are the politicians who have been head of state of the [LITERAL] at any time, and what are their countries of citizenship?", "masked_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfGovernment]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country_of_citizenship", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship"], "candidates": ["MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN COUNT(DISTINCT n.country_of_citizenship)", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN MIN(n.country_of_citizenship)", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.date_of_birth", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship"], "label": 11}
{"qid": "bdbe3528-5bb6-4e06-ac69-821a1b0bc9e3", "graph": "politics", "gold_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: 'Ministry of National Defence'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "nl_question": "What are the names and schools attended by politicians who have served as the head of state of a country to which the Ministry of National Defence belongs?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and schools attended by politicians who have served as the head of state of a country to which the [LITERAL] belongs?", "masked_cypher": "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country), (n:Politician)<-[r1:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfState]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country), (n:Politician)<-[r1:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name"], "label": 12}
{"qid": "0188376e-7e4e-4a03-a2a9-75f141b9d78a", "graph": "politics", "gold_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "nl_question": "What are the names of countries, sorted by their founding dates from the most recent to the oldest?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of countries, sorted by their founding dates from the most recent to the oldest?", "masked_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician),(n:Country)-[r1:hasHeadOfState]->(m0:Politician) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport),(n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person),(n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC"], "candidates": ["MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date >= date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date <= date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN MAX(n.founding_date)", "MATCH (n:Country) WITH DISTINCT n WHERE n.founding_date < date('[LITERAL]') RETURN n.name", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.founding_date", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1"], "label": 1}
{"qid": "83b670dd-02ef-4f8b-a12c-12eb01c49981", "graph": "politics", "gold_cypher": "CALL { MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: 'Greek Rally'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: 'Ministry of Economy, Development and Tourism'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "nl_question": "How many countries does the Greek Rally operate in or the Ministry of Economy, Development and Tourism belong to?", "from_template": {"match_category": "special_union", "match_cypher": "CALL { MATCH (n)<-[r0]-(m0<name>) RETURN n, m0 as m UNION MATCH (n)<-[r1]-(m1<name>) RETURN n, m1 as m }", "return_pattern_id": "n_union_count", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN count(n)"}, "masked_question": "How many countries does the [LITERAL] operate in or the [LITERAL] belong to?", "masked_cypher": "CALL { MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "negative_cypher": [], "hard_negative_cypher": ["CALL { MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Award)<-[r0:receivesAward]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Award)<-[r1:receivesAward]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)<-[r0:killedBy]-(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Position)<-[r0:playsPosition]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Position)<-[r1:playsPosition]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "candidates": ["MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) OPTIONAL MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.founding_date AS prop RETURN DISTINCT prop", "CALL { MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:GovernmentOrganization)-[r1:belongsTo]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:PoliticalParty)-[r0:operatesIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}),(n:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 16}
{"qid": "3af69482-7a88-4795-aeb9-356a9c1be0f9", "graph": "politics", "gold_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: 'World Meteorological Organization'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of countries that are members of the World Meteorological Organization, along with the number of countries that have diplomatic relations with each of them.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of countries that are members of the [LITERAL], along with the number of countries that have diplomatic relations with each of them.", "masked_cypher": "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:belongsTo]-(m0:GovernmentOrganization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization)<-[r1:memberOf]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}),(n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "CALL { MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "label": 18}
{"qid": "dac46171-f5ec-4da4-9b64-b16c50231cd5", "graph": "company", "gold_cypher": "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: 'Novo Nordisk (Germany)'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of companies that have 'Novo Nordisk (Germany)' as a subsidiary?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of companies that have '[LITERAL]' as a subsidiary?", "masked_cypher": "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "CALL { MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 10}
{"qid": "45f852bc-4ee8-4233-b36e-d3584f6b63a2", "graph": "company", "gold_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: 'Canada'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of industries in which Canadian companies operate, and how many Canadian companies are there in each industry?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of industries in which Canadian companies operate, and how many Canadian companies are there in each industry?", "masked_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry)<-[r1:operatesIn]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry)<-[r1:operatesIn]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "label": 19}
{"qid": "d987b804-24f6-4734-9100-b9ff4b2716c6", "graph": "company", "gold_cypher": "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: 'footwear industry'}) WITH DISTINCT n RETURN n.name, n.gender", "nl_question": "Who are the founders of companies in the footwear industry, and what are their genders?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Who are the founders of companies in the [LITERAL], and what are their genders?", "masked_cypher": "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender"], "candidates": ["MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n WHERE n.gender >= '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.gender DESC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n WHERE n.gender > '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.gender ASC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n WHERE n.gender <= '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n WHERE n.gender = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.gender > '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.gender >= '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.gender ASC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.gender DESC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.gender <= '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.gender = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN n.name, n.gender"], "label": 11}
{"qid": "3ac487b6-9f39-4dfe-a5fa-78d54347c97f", "graph": "company", "gold_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of all the countries?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of all the countries?", "masked_cypher": "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.official_language", "MATCH (n:Country) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.name - m0.name AS answer", "MATCH (n:Country) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country {name: '[LITERAL]'}), (m0:Country {name: '[LITERAL]'}) RETURN n.name = m0.name AS answer", "MATCH (n:Country) WITH DISTINCT n RETURN MIN(n.name)"], "label": 11}
{"qid": "0df54707-df68-4abb-aee6-fe3a3e929238", "graph": "company", "gold_cypher": "CALL { MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: 'Italy'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: 'ferrous metallurgy'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "nl_question": "How many companies are either based in Italy or operate in the ferrous metallurgy industry?", "from_template": {"match_category": "special_union", "match_cypher": "CALL { MATCH (n)-[r0]->(m0<name>) RETURN n, m0 as m UNION MATCH (n)-[r1]->(m1<name>) RETURN n, m1 as m }", "return_pattern_id": "n_union_count", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN count(n)"}, "masked_question": "How many companies are either based in [LITERAL] or operate in the [LITERAL] industry?", "masked_cypher": "CALL { MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "negative_cypher": [], "hard_negative_cypher": ["CALL { MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Company)-[r0:hasCEO]->(m0:Person {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Award)<-[r0:receivesAward]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Award)<-[r1:receivesAward]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "candidates": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "CALL { MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "CALL { MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 15}
{"qid": "2186ba3e-a8bd-4362-b159-9a9afd3b82f6", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: 'Marie-Etienne Nitot'}) WITH DISTINCT n RETURN n.name, n.launch_year", "nl_question": "What are the names and launch years of companies founded by Marie-Etienne Nitot?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and launch years of companies founded by [LITERAL]?", "masked_cypher": "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year"], "label": 11}
{"qid": "0c0632d7-f6ec-4358-aff0-acaf20702c74", "graph": "company", "gold_cypher": "MATCH (n:Person {name: 'Paul Stone'}) WITH DISTINCT n RETURN n.gender", "nl_question": "What is Paul Stone's gender?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is [LITERAL]'s gender?", "masked_cypher": "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_birth", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_birth", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender"], "candidates": ["MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN m0.date_of_birth - n.gender AS answer", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN m0.gender - n.gender AS answer", "MATCH (n:Person) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Person) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender > '[LITERAL]' RETURN n.name", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN n.place_of_birth = m0.gender AS answer", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender >= '[LITERAL]' RETURN n.name", "MATCH (n:Person) WITH DISTINCT n RETURN MAX(n.gender)", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN n.gender = m0.gender AS answer", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN CASE WHEN n.gender != m0.date_of_birth THEN n.name ELSE m0.name END AS answer", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender <= '[LITERAL]' RETURN n.name", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN CASE WHEN n.gender != m0.place_of_birth THEN n.name ELSE m0.name END AS answer", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person) WITH DISTINCT n RETURN n.name ORDER BY n.gender ASC", "MATCH (n:Person) WITH DISTINCT n RETURN n.name, n.gender"], "label": 10}
{"qid": "8536d1ef-cb04-4bc6-8f9a-4aff1279dc0f", "graph": "company", "gold_cypher": "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "nl_question": "Who is the youngest individual who has ever been a board member of a company?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Who is the youngest individual who has ever been a board member of a company?", "masked_cypher": "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1"], "candidates": ["MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth >= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN MIN(n.date_of_birth)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth <= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.date_of_birth)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1"], "label": 17}
{"qid": "d8da9215-fcc1-447d-8750-5b27abe69f5b", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: 'United States of America'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all companies based in the United States of America, along with the number of companies that are their subsidiaries.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all companies based in the [LITERAL], along with the number of companies that are their subsidiaries.", "masked_cypher": "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "CALL { MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name"], "label": 9}
{"qid": "bbbf6cf5-5092-4944-b4bb-68d88bd4c7f7", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: 'Republic of Ireland'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all companies headquartered in the Republic of Ireland, along with the number of industries each operates in.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all companies headquartered in the [LITERAL], along with the number of industries each operates in.", "masked_cypher": "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 15}
{"qid": "b4a05eea-ab31-4e46-a8d1-6b805db9db7d", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: 'Patricia Barbizet'}) WITH DISTINCT n RETURN n.name, n.launch_year", "nl_question": "What are the names and launch years of companies that are subsidiaries of a company where Patricia Barbizet has served as a board member?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and launch years of companies that are subsidiaries of a company where [LITERAL] has served as a board member?", "masked_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN DISTINCT n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN MIN(n.launch_year)"], "label": 10}
{"qid": "5fb709d0-f406-496f-9fe9-728359e932a4", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: 'Amy Chang'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of companies where Amy Chang has served as a board member, along with the number of industries each company operates in.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of companies where [LITERAL] has served as a board member, along with the number of industries each company operates in.", "masked_cypher": "MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) OPTIONAL MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.gender)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.gender ASC", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC"], "label": 9}
{"qid": "0bcecd63-440e-413f-a2fa-dde2a4df1d5a", "graph": "company", "gold_cypher": "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: 'jewelry industry'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of countries where companies in the jewelry industry are headquartered?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of countries where companies in the [LITERAL] are headquartered?", "masked_cypher": "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 12}
{"qid": "0545330c-2fcb-48ff-87c9-edccff07d506", "graph": "company", "gold_cypher": "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: 'electronics'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of countries where companies in the electronics industry are based, and how many such companies are there in each country?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of countries where companies in the [LITERAL] industry are based, and how many such companies are there in each country?", "masked_cypher": "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)"], "label": 10}
{"qid": "7c517d2c-759a-4b8c-9281-9c274d39336a", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: 'Australia'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of companies that are subsidiaries of companies based in Australia?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of companies that are subsidiaries of companies based in [LITERAL]?", "masked_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 14}
{"qid": "88276312-ced2-4070-8196-878e5ca9a85c", "graph": "company", "gold_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: 'Republic of Ireland'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of industries in which companies based in the Republic of Ireland operate, and how many such companies are there for each industry?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of industries in which companies based in the [LITERAL] operate, and how many such companies are there for each industry?", "masked_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 12}
{"qid": "1a13170f-30a5-44af-97c7-85b25ba51a4b", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: 'media & entertainment industry'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all companies operating in the media and entertainment industry, along with the number of founders of each company.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all companies operating in the media and entertainment industry, along with the number of founders of each company.", "masked_cypher": "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1"], "label": 5}
{"qid": "0ac2448e-578c-4999-becc-39991d78bc60", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: 'Sandra Lerner'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: 'Okena'}) WITH DISTINCT n RETURN n.name, n.launch_year", "nl_question": "What are the names and launch years of companies that are founded by Sandra Lerner and have Okena as a subsidiary?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)<-[r1]-(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and launch years of companies that are founded by [LITERAL] and have [LITERAL] as a subsidiary?", "masked_cypher": "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.launch_year)"], "label": 12}
{"qid": "c6f6de57-9a90-4888-84e5-a2cb93ff042b", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: 'Twinkl'}) WITH DISTINCT n RETURN n.name, n.launch_year", "nl_question": "What are the names and launch years of companies that are subsidiaries of Twinkl?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and launch years of companies that are subsidiaries of [LITERAL]?", "masked_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year"], "label": 7}
{"qid": "a26fa1a8-6f9a-4f0c-9500-69b2c4d9de8a", "graph": "company", "gold_cypher": "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: 'HSBC'}) WITH DISTINCT n RETURN n.name", "nl_question": "Who are the founders of companies that are subsidiaries of HSBC?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "Who are the founders of companies that are subsidiaries of [LITERAL]?", "masked_cypher": "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "label": 4}
{"qid": "6e16e751-1501-420d-99d2-7c64b9b282c5", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: 'film industry'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all companies operating in the film industry, along with the number of individuals who have served as board members for each company, whether currently or in the past.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all companies operating in the [LITERAL], along with the number of individuals who have served as board members for each company, whether currently or in the past.", "masked_cypher": "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.date_of_death)", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company), (n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.date_of_death)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.date_of_death)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)"], "label": 11}
{"qid": "f88aa75d-839c-4b8a-9d43-3bc6af1e1435", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: 'hotel industry'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of companies operating in the hotel industry, along with the number of countries they are based in.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of companies operating in the [LITERAL], along with the number of countries they are based in.", "masked_cypher": "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1"], "label": 2}
{"qid": "f4df21ed-8607-4729-b29c-ae0e82609998", "graph": "company", "gold_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: 'Foxconn'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of industries in which Foxconn operates?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of industries in which [LITERAL] operates?", "masked_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}),(n:Industry)<-[r1:operatesIn]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "CALL { MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Industry)<-[r1:operatesIn]-(m1:Company {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Industry) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 10}
{"qid": "c626da0a-e50e-4baf-b32e-699e46c4f9c2", "graph": "company", "gold_cypher": "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth > date('1962-04-21') RETURN n.name", "nl_question": "What are the names of individuals born after April 21st, 1962?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of individuals born after April [LITERAL]st, [LITERAL]?", "masked_cypher": "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport),(n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death = date('[LITERAL]') RETURN n.name", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person),(n:Movie)-[r1:writtenBy]->(m0:Person) WITH DISTINCT n WHERE n.global_box_office_usd > [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name"], "candidates": ["MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth != date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth >= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth <= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth >= date('[LITERAL]') RETURN n.name", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.date_of_birth", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_death != date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_death >= date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_death < date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_death <= date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_death = date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n RETURN n.name, n.date_of_birth"], "label": 1}
{"qid": "1775f131-5f12-46f4-8d4b-03bd4e9cc408", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: 'Jérôme Hatt'}) WITH DISTINCT n RETURN n.name, n.launch_year", "nl_question": "What are the names and launch years of companies founded by Jérôme Hatt?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and launch years of companies founded by [LITERAL]?", "masked_cypher": "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person)<-[r1:hasCEO]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "label": 7}
{"qid": "39d87753-bd2c-431d-b1b3-214f6ac62a3b", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: 'public relations'}) WITH DISTINCT n RETURN n.name, n.launch_year", "nl_question": "What are the names and launch years of companies that operate in the public relations industry?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and launch years of companies that operate in the [LITERAL] industry?", "masked_cypher": "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company) WITH DISTINCT n RETURN n.name, n.launch_year"], "label": 7}
{"qid": "761bd65a-2c68-465a-adbd-d090c3e9f6df", "graph": "company", "gold_cypher": "MATCH (n:Person {name: 'Henry VIII of England'}) WITH DISTINCT n RETURN n.gender", "nl_question": "What is Henry VIII of England's gender?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is [LITERAL]'s gender?", "masked_cypher": "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_birth", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_birth", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender"], "candidates": ["MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN m0.gender - n.gender AS answer", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN m0.date_of_death - n.gender AS answer", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN n.gender - m0.gender AS answer", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN n.date_of_death - m0.gender AS answer", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN n.gender = m0.date_of_death AS answer", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN n.date_of_death = m0.gender AS answer", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN n.gender = m0.gender AS answer", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender > '[LITERAL]' RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender >= '[LITERAL]' RETURN n.name", "MATCH (n:Person) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN CASE WHEN n.gender != m0.date_of_death THEN n.name ELSE m0.name END AS answer", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender <= '[LITERAL]' RETURN n.name", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN CASE WHEN n.date_of_death != m0.gender THEN n.name ELSE m0.name END AS answer", "MATCH (n:Person) WITH DISTINCT n WHERE n.gender = '[LITERAL]' RETURN n.name", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN CASE WHEN n.gender = m0.date_of_death THEN n.name ELSE m0.name END AS answer", "MATCH (n:Person) WITH DISTINCT n RETURN MAX(n.gender)", "MATCH (n:Person {name: '[LITERAL]'}), (m0:Person {name: '[LITERAL]'}) RETURN CASE WHEN n.date_of_death = m0.gender THEN n.name ELSE m0.name END AS answer"], "label": 10}
{"qid": "14133f73-936a-474a-bcac-f9713b86d64d", "graph": "company", "gold_cypher": "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: 'Tennman Records'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "nl_question": "Who are the individuals that Tennman Records was founded by, and where were they born?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Who are the individuals that [LITERAL] was founded by, and where were they born?", "masked_cypher": "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_birth", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_birth", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}),(n:Person)<-[r1:hasCEO]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}),(n:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}),(n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date_of_birth", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Politician)<-[r1:foundedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name"], "candidates": ["MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.place_of_birth)", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_birth DESC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_birth ASC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name, n.date_of_birth", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_birth ASC LIMIT 1", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth"], "label": 16}
{"qid": "37838f6b-fa4b-413c-995e-2704923428b4", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: 'chemical industry'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of companies operating in the chemical industry, along with the number of individuals who have served on their boards, either currently or in the past.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of companies operating in the [LITERAL], along with the number of individuals who have served on their boards, either currently or in the past.", "masked_cypher": "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasCEO]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:basedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person), (n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.date_of_death)", "MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.date_of_death)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.launch_year)"], "label": 13}
{"qid": "99883807-31c1-45ba-8ea3-6d123104d6aa", "graph": "company", "gold_cypher": "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: 'England'}) WITH DISTINCT n RETURN n.name", "nl_question": "Who are the founders of companies that are based in England?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "Who are the founders of companies that are based in [LITERAL]?", "masked_cypher": "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death < date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death = date('[LITERAL]') RETURN n.name"], "label": 13}
{"qid": "2929ac5c-8d9d-43eb-8576-d4a11c8888dc", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < 1868 RETURN n.name", "nl_question": "What are the names of companies that are subsidiaries and were launched before the year 1868?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of companies that are subsidiaries and were launched before the year [LITERAL]?", "masked_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death.year < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date.year = [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person),(n:Movie)-[r1:writtenBy]->(m0:Person) WITH DISTINCT n WHERE n.global_box_office_usd > [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name"], "candidates": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n UNWIND n.launch_year AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year"], "label": 14}
{"qid": "4c2870fb-cab3-4bf7-9af3-c1ad670ad82a", "graph": "company", "gold_cypher": "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: 'People\\'s Republic of China'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of companies that have subsidiaries based in the People's Republic of China, and how many such subsidiaries does each have?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of companies that have subsidiaries based in the [LITERAL], and how many such subsidiaries does each have?", "masked_cypher": "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:basedIn]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)"], "label": 12}
{"qid": "9f6ad178-b6e1-465a-b74b-8b09eada5392", "graph": "company", "gold_cypher": "MATCH (n:Industry) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of the industries?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of the industries?", "masked_cypher": "MATCH (n:Industry) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Industry) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Industry) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Industry) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Industry) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Industry) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Industry) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Industry) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Industry) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry {name: '[LITERAL]'}), (m0:Industry {name: '[LITERAL]'}) RETURN n.name = m0.name AS answer", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 9}
{"qid": "3cefbff8-7f42-4732-9671-614c9bc13d36", "graph": "company", "gold_cypher": "MATCH (n:Person {name: 'Henry VIII of England'}) WITH DISTINCT n RETURN n.place_of_birth", "nl_question": "Where was Henry VIII of England born?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "Where was [LITERAL] born?", "masked_cypher": "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_birth", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Politician)<-[r1:foundedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth <> '[LITERAL]' RETURN n.name"], "candidates": ["MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Person) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.date_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.place_of_birth AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_birth DESC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.place_of_birth)", "MATCH (n:Person) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_birth ASC", "MATCH (n:Person) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person) WITH DISTINCT n RETURN MAX(n.place_of_birth)", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.place_of_birth ASC LIMIT 1"], "label": 10}
{"qid": "9baed7ec-7ddc-4ec3-9478-f923d9d546be", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "nl_question": "What is the name of the company that is a subsidiary of another company and was launched most recently?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "What is the name of the company that is a subsidiary of another company and was launched most recently?", "masked_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1"], "candidates": ["MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN MAX(n.launch_year)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN MAX(n.launch_year)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN MIN(n.launch_year)", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN MIN(n.launch_year)"], "label": 10}
{"qid": "2fb9895a-9d0c-4d0e-979e-a2f7d08c3b5b", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: 'The Coca-Cola Company'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of companies that are subsidiaries of The Coca-Cola Company?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of companies that are subsidiaries of [LITERAL]?", "masked_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "CALL { MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 16}
{"qid": "61c195a2-25f3-4032-8cbc-bb3f7f5efa3d", "graph": "company", "gold_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: 'Harry Williams'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the industries in which companies founded by Harry Williams operate?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the industries in which companies founded by [LITERAL] operate?", "masked_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 9}
{"qid": "b320b0cc-708c-448c-bcaa-350614681b46", "graph": "company", "gold_cypher": "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < 1907 RETURN n.name", "nl_question": "What are the names of companies that have subsidiaries and were launched before the year 1907?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of companies that have subsidiaries and were launched before the year [LITERAL]?", "masked_cypher": "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death.year < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:basedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN min(n.launch_year)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident) WITH DISTINCT n WHERE n.date.year = [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person),(n:Movie)-[r1:writtenBy]->(m0:Person) WITH DISTINCT n WHERE n.global_box_office_usd > [LITERAL] RETURN n.name", "MATCH (n:Ocean) WITH DISTINCT n WHERE n.max_vertical_depth_m > [LITERAL] RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:locatedIn]-(m1:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 > [LITERAL] RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)-[r1:hasHeadOfGovernment]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year > [LITERAL] RETURN n.name"], "candidates": ["MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year >= [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year > [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year"], "label": 13}
{"qid": "94f34a34-6804-4ec0-b223-5948b3bf9f90", "graph": "company", "gold_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: 'Larry Rossy'}) WITH DISTINCT n RETURN n.name, n.launch_year", "nl_question": "What are the names and launch years of companies that are subsidiaries of a company founded by Larry Rossy?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and launch years of companies that are subsidiaries of a company founded by [LITERAL]?", "masked_cypher": "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.launch_year", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "candidates": ["MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year != [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year <= [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person), (n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year = [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:subsidiaryOf]->(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.launch_year"], "label": 8}
{"qid": "343feec2-8db2-4d40-8259-841bed2193af", "graph": "company", "gold_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: 'Vivek Sankaran'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the industries in which a company with Vivek Sankaran as a board member operates?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the industries in which a company with [LITERAL] as a board member operates?", "masked_cypher": "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company), (n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:operatesIn]->(m0:Industry {name: '[LITERAL]'}),(n:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)<-[r1:subsidiaryOf]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Industry)<-[r0:operatesIn]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.name)", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1"], "label": 5}
{"qid": "a9d8e736-6348-400c-bb15-6a5de9975f4f", "graph": "fictional_character", "gold_cypher": "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of the locations?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of the locations?", "masked_cypher": "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Location) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization {name: '[LITERAL]'}),(n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location) WITH DISTINCT n RETURN DISTINCT n.name", "CALL { MATCH (n:Location)<-[r0:basedIn]-(m0:Organization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name, n.name"], "label": 17}
{"qid": "cac64b27-c60f-40fa-a445-6ee4c0439748", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'Future Diary universe'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all characters from the Future Diary universe, along with the number of characters that each of them have killed.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all characters from the [LITERAL], along with the number of characters that each of them have killed.", "masked_cypher": "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.occupation)", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.occupation)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 7}
{"qid": "277ebff9-2c5d-4489-a183-56a44bf1fc90", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "nl_question": "Provide the names and creators of characters who have been killed by another character.", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Provide the names and creators of characters who have been killed by another character.", "masked_cypher": "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:diedIn]->(m0:Location),(n:Character)-[r1:bornIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character),(n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)<-[r1:hasMother]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:diedIn]->(m0:Location)<-[r1:bornIn]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator"], "candidates": ["MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name ORDER BY n.creator DESC", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name ORDER BY n.creator DESC", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name ORDER BY n.creator DESC LIMIT 1", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator > '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator >= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator <= '[LITERAL]' RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator = '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator"], "label": 4}
{"qid": "02f3276d-227b-4537-9df3-ccd260117722", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: 'Subhuti'}) WITH DISTINCT n RETURN DISTINCT n.gender", "nl_question": "What are the unique genders of characters who were killed by a student of Subhuti?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique genders of characters who were killed by a student of [LITERAL]?", "masked_cypher": "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender"], "candidates": ["MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name"], "label": 13}
{"qid": "62bf830e-6807-44af-b20b-d981c27accfb", "graph": "fictional_character", "gold_cypher": "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'The Simpsons universe'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of locations where characters from The Simpsons universe have died?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of locations where characters from [LITERAL] have died?", "masked_cypher": "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator >= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator <= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator > '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator = '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 2}
{"qid": "870b56dd-f365-4912-aa30-a1a0c76703b0", "graph": "fictional_character", "gold_cypher": "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: 'Ultimate Wolverine'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of organizations that include a character whose father is Ultimate Wolverine?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of organizations that include a character whose father is [LITERAL]?", "masked_cypher": "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator != '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasFather]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasFather]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasFather]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasFather]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 13}
{"qid": "528e14c6-2812-4a5b-9408-cd6e9d945690", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: 'Cosmere'}) WITH DISTINCT n WHERE NOT 'therapist' IN n.occupation RETURN n.name", "nl_question": "What are the names of characters from the Cosmere universe who do not work as therapists?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of characters from the [LITERAL] universe who do not work as [LITERAL]s?", "masked_cypher": "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character),(n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character),(n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.country_of_citizenship RETURN n.name"], "candidates": ["MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse)<-[r1:fromUniverse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)<-[r1:hasMother]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)<-[r1:hasFather]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name"], "label": 7}
{"qid": "d76a50ab-f1e8-4fd9-832c-75cd330ac46e", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "nl_question": "What are the unique birth names of characters who have a mother?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique birth names of characters who have a mother?", "masked_cypher": "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character),(n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}),(n:Character)<-[r1:hasMother]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name"], "candidates": ["MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n UNWIND n.birth_name AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:hasFather]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name"], "label": 4}
{"qid": "359424c7-8109-465e-9af1-ab5fba0836bd", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender", "nl_question": "What are the unique genders of characters who are members of an organization?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique genders of characters who are members of an organization?", "masked_cypher": "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN count(DISTINCT n.gender)", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty),(n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:writtenBy]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)<-[r1:hasMother]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "label": 1}
{"qid": "a2ab1b68-3012-4e78-97c8-4012b471ee35", "graph": "fictional_character", "gold_cypher": "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: 'Stick'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of organizations that have members who are students of Stick, and how many such students are members of each organization?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of organizations that have members who are students of [LITERAL], and how many such students are members of each organization?", "masked_cypher": "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "CALL { MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1"], "label": 3}
{"qid": "335a8e5b-e84e-48ff-bcfc-dd076742b25c", "graph": "fictional_character", "gold_cypher": "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: 'New New York'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of organizations located in New New York?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of organizations located in [LITERAL]?", "masked_cypher": "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:Organization) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 16}
{"qid": "71fd7826-a492-489b-b00e-cb3e02fd2db5", "graph": "fictional_character", "gold_cypher": "MATCH (n:Organization)-[r0:basedIn]->(m0:Location)<-[r1:diedIn]-(m1:Character {name: 'Jon Snow'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of organizations located in the place where Jon Snow died?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of organizations located in the place where [LITERAL] died?", "masked_cypher": "MATCH (n:Organization)-[r0:basedIn]->(m0:Location)<-[r1:diedIn]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Character)-[r0:diedIn]->(m0:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location)<-[r1:diedIn]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location)<-[r1:diedIn]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location)<-[r1:diedIn]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization {name: '[LITERAL]'}),(n:Location)<-[r1:diedIn]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 5}
{"qid": "eb7c8d06-042a-406b-acdf-d20085cad988", "graph": "fictional_character", "gold_cypher": "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'World of Ice and Fire'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of locations where organizations from the World of Ice and Fire are based, and how many such organizations are based in each location?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of locations where organizations from the [LITERAL] are based, and how many such organizations are based in each location?", "masked_cypher": "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) OPTIONAL MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.inception_year)", "CALL { MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "label": 10}
{"qid": "8de6f40e-42c3-4d01-becd-5e72ed10fffa", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "nl_question": "Who are the unique creators of characters who have been killed by another character?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "Who are the unique creators of characters who have been killed by another character?", "masked_cypher": "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:diedIn]->(m0:Location),(n:Character)-[r1:bornIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character),(n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)<-[r1:hasMother]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:diedIn]->(m0:Location)<-[r1:bornIn]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator"], "candidates": ["MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n UNWIND n.creator AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.creator AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n UNWIND n.creator AS prop RETURN DISTINCT prop", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator"], "label": 2}
{"qid": "c8fdd8f6-bb90-4040-b37c-7583ae325d6e", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of characters who are fathers?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of characters who are fathers?", "masked_cypher": "MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH DISTINCT n WHERE '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender != '[LITERAL]' RETURN n.name", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender > '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender >= '[LITERAL]' RETURN n.name", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:hasFather]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender <= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.gender = '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender"], "label": 6}
{"qid": "d9e3b160-a3fa-4da1-9ee0-335f69ed384d", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n WHERE NOT 'terrorist' IN n.occupation RETURN n.name", "nl_question": "What are the names of individuals who killed someone, provided they are not terrorists by occupation?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of individuals who killed someone, provided they are not [LITERAL]s by occupation?", "masked_cypher": "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:killedBy]->(m0:Character),(n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character),(n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person),(n:Movie)-[r1:directedBy]->(m0:Person) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.filming_location RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name"], "candidates": ["MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name ORDER BY n.occupation DESC", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name ORDER BY n.occupation DESC", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)<-[r1:hasSpouse]-(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)<-[r1:hasSpouse]-(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name, n.occupation"], "label": 0}
{"qid": "02ec5a2b-6a04-4c5e-8c3f-945b6c84c32a", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "nl_question": "What are the unique countries of citizenship of individuals who are mothers?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_prop_array_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n UNWIND n.${prop} AS prop RETURN DISTINCT prop"}, "masked_question": "What are the unique countries of citizenship of individuals who are mothers?", "masked_cypher": "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie),(n:Person)<-[r1:directedBy]-(m0:Movie) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie),(n:Person)<-[r1:writtenBy]-(m0:Movie) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician),(n:Country)-[r1:hasHeadOfGovernment]->(m0:Politician) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop"], "candidates": ["MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)<-[r1:hasFather]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:hasFather]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:hasFather]-(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN MIN(n.country_of_citizenship)"], "label": 1}
{"qid": "5a703e5c-8b2e-4d91-99c7-c99746ab9b94", "graph": "fictional_character", "gold_cypher": "MATCH (n:Location)<-[r0:bornIn]-(m0:Character) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of locations where characters were born?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of locations where characters were born?", "masked_cypher": "MATCH (n:Location)<-[r0:bornIn]-(m0:Character) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Location)<-[r0:bornIn]-(m0:Character) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Location)<-[r0:bornIn]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator <= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator = '[LITERAL]' RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name"], "label": 1}
{"qid": "5ed05ae2-67c0-4cd5-b3ba-40a2d61c14b1", "graph": "fictional_character", "gold_cypher": "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)<-[r1:memberOf]-(m1:Character {name: 'Eddison Tollett'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of locations where organizations that Eddison Tollett is a member of are based, and how many such organizations are based in each location?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of locations where organizations that [LITERAL] is a member of are based, and how many such organizations are based in each location?", "masked_cypher": "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN COUNT(DISTINCT n.country_of_citizenship)", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.country_of_citizenship)", "MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.country_of_citizenship)", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 8}
{"qid": "41483491-9bb0-42ff-9465-f0531338044d", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "nl_question": "What are the names and birth names of characters who have teachers?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and birth names of characters who have teachers?", "masked_cypher": "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character),(n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}),(n:Character)<-[r1:hasMother]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name"], "candidates": ["MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:hasStudent]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasStudent]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name"], "label": 0}
{"qid": "e4d228a0-da0c-42f4-b175-afe24673db8b", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:diedIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of characters who died?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of characters who died?", "masked_cypher": "MATCH (n:Character)-[r0:diedIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:diedIn]->(m0:Location) WITH DISTINCT n WHERE '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator > '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator >= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator <= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator = '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN n.name"], "label": 1}
{"qid": "fe477213-9ae0-44bb-bd31-a32dd9f7365b", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of characters who have a mother?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of characters who have a mother?", "masked_cypher": "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Character)-[r0:hasStudent]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name, n.birth_name"], "label": 9}
{"qid": "97d308ed-4510-4fb7-8c7a-ad43b11a6d45", "graph": "fictional_character", "gold_cypher": "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: 'Yukiteru Amano'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of fictional universes that include a character who has Yukiteru Amano as a student?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of fictional universes that include a character who has [LITERAL] as a student?", "masked_cypher": "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator > '[LITERAL]' RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator >= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator <= '[LITERAL]' RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator > '[LITERAL]' RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator > '[LITERAL]' RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator = '[LITERAL]' RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 15}
{"qid": "2eaf55b4-1420-4910-9afc-7c9d827f0df7", "graph": "fictional_character", "gold_cypher": "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: 'Known Space'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of organizations that originate from the Known Space universe?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of organizations that originate from the [LITERAL] universe?", "masked_cypher": "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year != [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1"], "label": 15}
{"qid": "9bb1fbe3-f3b9-40c0-b4b8-8fb02aa518b7", "graph": "fictional_character", "gold_cypher": "MATCH (n:Organization) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of organizations?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of organizations?", "masked_cypher": "MATCH (n:Organization) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Organization) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Organization) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Organization) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Organization) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Organization) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Organization) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Organization) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Organization) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Organization) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Organization) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Organization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization {name: '[LITERAL]'}), (m0:Organization {name: '[LITERAL]'}) RETURN n.name = m0.name AS answer", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.name"], "label": 8}
{"qid": "ca5940f8-4b39-4c54-b9da-79b108c0163c", "graph": "fictional_character", "gold_cypher": "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'Earth-167'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of locations where characters from the Earth-167 universe were born, and how many such characters were born in each location?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of locations where characters from the [LITERAL] universe were born, and how many such characters were born in each location?", "masked_cypher": "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Character)-[r0:bornIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.occupation)", "MATCH (n:Character)-[r0:bornIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:bornIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)"], "label": 6}
{"qid": "7e8a54df-6d96-47f4-b988-7e784bb18572", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'Cosmere'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of characters who killed individuals from the Cosmere universe, and how many such victims from the Cosmere are there for each of these characters?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of characters who killed individuals from the [LITERAL] universe, and how many such victims from the [LITERAL] are there for each of these characters?", "masked_cypher": "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)<-[r1:hasMother]-(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character), (n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name ORDER BY n.creator DESC", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:killedBy]->(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasMother]->(m0:Character) WITH DISTINCT n RETURN n.name ORDER BY n.creator DESC LIMIT 1", "MATCH (n:Character)-[r0:killedBy]->(m0:Character), (n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name ORDER BY n.creator DESC LIMIT 1"], "label": 3}
{"qid": "12a7f822-9177-435e-a36d-ec7f76a462c6", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'Marvel Universe'}) OPTIONAL MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all characters from the Marvel Universe, along with the number of students each one has.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all characters from the [LITERAL], along with the number of students each one has.", "masked_cypher": "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasStudent]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.occupation)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:hasStudent]->(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 15}
{"qid": "5b0dc615-e676-4603-bf00-86c9a446bdb1", "graph": "fictional_character", "gold_cypher": "MATCH (n:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.inception_year", "nl_question": "What are the names of fictional universes along with their inception years?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names of fictional universes along with their inception years?", "masked_cypher": "MATCH (n:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.inception_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FictionalUniverse) WITH DISTINCT n WHERE n.creator = '[LITERAL]' RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location),(n:Character)-[r1:bornIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year != [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC LIMIT 1", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:FictionalUniverse) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.inception_year"], "label": 19}
{"qid": "0e78c2ff-875f-4ac0-88a3-cf7ceab0dec2", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: 'Bandit Heeler'}) WITH DISTINCT n RETURN DISTINCT n.creator", "nl_question": "Who are the unique creators of characters whose father is Bandit Heeler?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "Who are the unique creators of characters whose father is [LITERAL]?", "masked_cypher": "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)<-[r1:hasMother]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:diedIn]->(m0:Location)<-[r1:bornIn]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}),(n:Character)<-[r1:hasFather]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.occupation", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character {name: '[LITERAL]'}),(n:Character)<-[r1:hasMother]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator"], "candidates": ["MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasFather]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character), (n:Character)-[r1:hasFather]->(m0:Character) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.creator"], "label": 6}
{"qid": "875e72cf-3643-4dd5-a5f7-03f95d700d1c", "graph": "fictional_character", "gold_cypher": "MATCH (n:FictionalUniverse {name: 'Known Space'}), (m0:FictionalUniverse {name: 'Ultimate Universe'}) RETURN n.inception_year - m0.inception_year AS answer", "nl_question": "What is the difference in inception years between Known Space and the Ultimate Universe?", "from_template": {"match_category": "special_comparison", "match_cypher": "MATCH (n<name,$prop>),(m0<name,$prop>)", "return_pattern_id": "n_m0_comparison_arithmetic", "return_cypher": "${match_cypher} RETURN n.${prop} - m0.${prop} AS answer"}, "masked_question": "What is the difference in inception years between [LITERAL] and the [LITERAL]?", "masked_cypher": "MATCH (n:FictionalUniverse {name: '[LITERAL]'}), (m0:FictionalUniverse {name: '[LITERAL]'}) RETURN n.inception_year - m0.inception_year AS answer", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FictionalUniverse {name: '[LITERAL]'}), (m0:FictionalUniverse {name: '[LITERAL]'}) RETURN CASE WHEN n.inception_year > m0.inception_year THEN n.name ELSE m0.name END AS answer", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN n.inception_year - m0.inception_year AS answer", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN n.inception_year = m0.inception_year AS answer", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN CASE WHEN n.inception_year > m0.inception_year THEN n.name ELSE m0.name END AS answer", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN CASE WHEN n.inception_year > m0.inception_year THEN n.name ELSE m0.name END AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.range_km - m0.range_km AS answer", "MATCH (n:Lake {name: '[LITERAL]'}), (m0:Lake {name: '[LITERAL]'}) RETURN n.vertical_depth_m - m0.vertical_depth_m AS answer", "MATCH (n:FlightAccident {name: '[LITERAL]'}), (m0:FlightAccident {name: '[LITERAL]'}) RETURN n.number_of_survivors - m0.number_of_survivors AS answer", "MATCH (n:Ocean {name: '[LITERAL]'}), (m0:Ocean {name: '[LITERAL]'}) RETURN n.area_km2 - m0.area_km2 AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.height_metre - m0.height_metre AS answer", "MATCH (n:River {name: '[LITERAL]'}), (m0:River {name: '[LITERAL]'}) RETURN n.length_km - m0.length_km AS answer", "MATCH (n:AircraftModel {name: '[LITERAL]'}), (m0:AircraftModel {name: '[LITERAL]'}) RETURN n.length_metre - m0.length_metre AS answer", "MATCH (n:River {name: '[LITERAL]'}), (m0:River {name: '[LITERAL]'}) RETURN n.discharge_m3_s - m0.discharge_m3_s AS answer", "MATCH (n:InternationalOrganization {name: '[LITERAL]'}), (m0:InternationalOrganization {name: '[LITERAL]'}) RETURN n.founding_year - m0.founding_year AS answer", "MATCH (n:Movie {name: '[LITERAL]'}), (m0:Movie {name: '[LITERAL]'}) RETURN n.runtime_minute - m0.runtime_minute AS answer"], "candidates": ["MATCH (n:FictionalUniverse {name: '[LITERAL]'}), (m0:FictionalUniverse {name: '[LITERAL]'}) RETURN n.inception_year - m0.inception_year AS answer", "MATCH (n:FictionalUniverse {name: '[LITERAL]'}), (m0:FictionalUniverse {name: '[LITERAL]'}) RETURN m0.inception_year - n.inception_year AS answer", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN COUNT(DISTINCT n.inception_year)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.inception_year AS prop RETURN DISTINCT prop", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.inception_year)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.inception_year)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.inception_year AS prop RETURN DISTINCT prop", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:FictionalUniverse {name: '[LITERAL]'}), (m0:FictionalUniverse {name: '[LITERAL]'}) RETURN n.inception_year = m0.inception_year AS answer", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC LIMIT 1"], "label": 0}
{"qid": "9dd39cf9-2d27-40c3-bcc6-b5ced818ff59", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'Donald Duck universe'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of characters who belong to organizations from the Donald Duck universe, and how many such organizations is each character a member of?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of characters who belong to organizations from the [LITERAL], and how many such organizations is each character a member of?", "masked_cypher": "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) OPTIONAL MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 8}
{"qid": "4760d85a-ff57-4be7-92d2-99ad65f4f53c", "graph": "fictional_character", "gold_cypher": "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'Journey to the West universe'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of characters who have students from the Journey to the West universe, and for each, provide the number of such students they have.", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of characters who have students from the [LITERAL], and for each, provide the number of such students they have.", "masked_cypher": "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.creator)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.birth_name)"], "label": 17}
{"qid": "0108109d-2e4d-4719-a6af-a13ff1292010", "graph": "fictional_character", "gold_cypher": "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of locations where organizations are based?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of locations where organizations are based?", "masked_cypher": "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 6}
{"qid": "94a73b37-7e11-4b26-ab7f-cfcd5719aade", "graph": "fictional_character", "gold_cypher": "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: 'Stick'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of organizations that include a student of Stick as a member?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of organizations that include a student of [LITERAL] as a member?", "masked_cypher": "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator = '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasStudent]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:hasStudent]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 4}
{"qid": "fa166d06-6c80-41e6-b208-cb8f4e28140a", "graph": "fictional_character", "gold_cypher": "MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of locations where characters have died?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)<-[r0]-(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of locations where characters have died?", "masked_cypher": "MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator != '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator >= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator < '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator <= '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.creator = '[LITERAL]' RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Location)<-[r0:diedIn]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 0}
{"qid": "6a4e7878-8a92-4d4a-b1b3-03f74c85ce38", "graph": "fictional_character", "gold_cypher": "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: 'Kirky Hassary'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: 'World of Ice and Fire'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of organizations from the World of Ice and Fire universe located in Kirky Hassary?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of organizations from the [LITERAL] universe located in [LITERAL]?", "masked_cypher": "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Organization)<-[r1:memberOf]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)-[r0:belongsTo]->(m0:Country {name: '[LITERAL]'}),(n:GovernmentOrganization)<-[r1:leads]-(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfGovernment]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}),(n:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}),(n:PoliticalParty)-[r1:headedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}),(n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:headedBy]->(m0:Politician {name: '[LITERAL]'}),(n:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:MountainRange {name: '[LITERAL]'}),(n:MountainRange)<-[r1:partOf]-(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}),(n:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Lake)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:operatesIn]-(m0:PoliticalParty {name: '[LITERAL]'}),(n:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Location)<-[r0:basedIn]-(m0:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)-[r0:basedIn]->(m0:Location {name: '[LITERAL]'}),(n:Organization)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 12}
{"qid": "9dc576e7-7d69-4b47-ab7e-03549594c266", "graph": "movie", "gold_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: 'Czech Republic'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of film series that include movies originating from the Czech Republic?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of film series that include movies originating from the [LITERAL]?", "masked_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name"], "label": 7}
{"qid": "fb6e5787-153f-434e-9968-1efb25307773", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "nl_question": "What is the name of the movie that is part of a film series and has the longest runtime?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "What is the name of the movie that is part of a film series and has the longest runtime?", "masked_cypher": "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:releasedIn]->(m0:Country),(n:Movie)-[r1:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC LIMIT 1", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:InternationalOrganization) WITH DISTINCT n RETURN n.name ORDER BY n.founding_year DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person),(n:Movie)-[r1:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC LIMIT 1", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC LIMIT 1"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN MAX(n.global_box_office_usd)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries)<-[r1:partOfSeries]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.global_box_office_usd)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE n.runtime_minute > [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries)<-[r1:partOfSeries]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.runtime_minute)"], "label": 14}
{"qid": "0fe76a86-d9e1-4ace-8d8d-1b1e96009306", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: 'Turkey'}) WITH DISTINCT n RETURN n.name, n.original_language", "nl_question": "What are the names and original languages of movies that come from Turkey?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and original languages of movies that come from [LITERAL]?", "masked_cypher": "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN max(n.runtime_minute)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)"], "candidates": ["MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country), (n:Movie)-[r1:releasedIn]->(m0:Country) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country)<-[r1:originatesFrom]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country), (n:Movie)-[r1:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country), (n:Movie)-[r1:releasedIn]->(m0:Country) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC LIMIT 1"], "label": 15}
{"qid": "aaf60c04-bdd1-4e30-bfc4-43ba9d643426", "graph": "movie", "gold_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: 'Germany'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of film series that include movies originating from Germany, and how many such German movies are part of each series?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of film series that include movies originating from [LITERAL], and how many such German movies are part of each series?", "masked_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "label": 10}
{"qid": "e93fde82-b545-4daf-b14d-562086b1fda3", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: 'Anonymous Content'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of all movies produced by Anonymous Content, and how many awards has each of them received?", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of all movies produced by [LITERAL], and how many awards has each of them received?", "masked_cypher": "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:writtenBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r1:foundedBy]-(m1:Company {name: '[LITERAL]'}) OPTIONAL MATCH (n:Person)<-[r0:hasCEO]-(m0:Company) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) OPTIONAL MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.runtime_minute)", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.runtime_minute)", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.runtime_minute)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.runtime_minute)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.runtime_minute)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.country)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)"], "label": 12}
{"qid": "5cc06786-edd4-4ca2-80c9-9cade85c645b", "graph": "movie", "gold_cypher": "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of film series?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of film series?", "masked_cypher": "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FilmSeries) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:FilmSeries) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FilmSeries) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 8}
{"qid": "6fd2aac1-85d3-46cc-b045-fc5d5b1a741a", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: 'Batman in film'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: 'Golden Trailer Awards'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "nl_question": "What are the names and global box office earnings of movies that are part of the Batman in film series and have received the Golden Trailer Awards?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and global box office earnings of movies that are part of the [LITERAL] series and have received the [LITERAL]?", "masked_cypher": "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.global_box_office_usd", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.global_box_office_usd", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.global_box_office_usd", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.global_box_office_usd AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries)<-[r1:partOfSeries]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.global_box_office_usd AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd <= [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd = [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd = [LITERAL] RETURN n.name"], "label": 18}
{"qid": "9582a9e6-ebba-44a5-ab9b-3b4d1d3b3413", "graph": "movie", "gold_cypher": "MATCH (n:ProductionCompany {name: 'Mirage Enterprises'}) WITH DISTINCT n RETURN n.country", "nl_question": "Which country is Mirage Enterprises based in?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "Which country is [LITERAL] based in?", "masked_cypher": "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:ProductionCompany {name: '[LITERAL]'}), (m0:ProductionCompany {name: '[LITERAL]'}) RETURN n.country = m0.country AS answer", "MATCH (n:ProductionCompany {name: '[LITERAL]'}), (m0:ProductionCompany {name: '[LITERAL]'}) RETURN n.country = m0.country AS answer", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie {name: '[LITERAL]'}),(n:ProductionCompany)<-[r1:producedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident),(n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.country"], "candidates": ["MATCH (n:ProductionCompany) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:ProductionCompany) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC", "MATCH (n:ProductionCompany) WITH DISTINCT n RETURN MAX(n.country)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country AS prop RETURN DISTINCT prop", "MATCH (n:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC", "MATCH (n:ProductionCompany) WITH DISTINCT n WHERE n.country != '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany) WITH DISTINCT n WHERE n.country > '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany) WITH DISTINCT n WHERE n.country >= '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany) WITH DISTINCT n WHERE n.country < '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany) WITH DISTINCT n WHERE n.country <= '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC LIMIT 1", "MATCH (n:ProductionCompany) WITH DISTINCT n WHERE n.country = '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.country < '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1", "MATCH (n:ProductionCompany) WITH DISTINCT n RETURN MIN(n.country)"], "label": 14}
{"qid": "dcca899b-2c01-4e95-ab95-f8f3d37700f8", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: 'absurdist fiction'}) WITH DISTINCT n RETURN n.name, n.filming_location", "nl_question": "What are the names and filming locations of movies that belong to the absurdist fiction genre?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and filming locations of movies that belong to the [LITERAL] genre?", "masked_cypher": "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.filming_location", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.filming_location", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN min(n.global_box_office_usd)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd"], "candidates": ["MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n WHERE '[LITERAL]' IN n.filming_location RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH DISTINCT n WHERE '[LITERAL]' IN n.filming_location RETURN n.name", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.filming_location RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location"], "label": 7}
{"qid": "23c806e7-786e-4400-8130-ae5181035330", "graph": "movie", "gold_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: 'France'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of film series that include movies released in France, and how many such movies are part of each series?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of film series that include movies released in [LITERAL], and how many such movies are part of each series?", "masked_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC LIMIT 1", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 13}
{"qid": "30d3b77b-1f22-44a3-81d6-d13b3f615d8e", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of movies that have received an award?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of movies that have received an award?", "masked_cypher": "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC LIMIT 1", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.runtime_minute >= [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.filming_location"], "label": 9}
{"qid": "1ee41641-257e-4159-b973-713badfd7201", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: 'Rocky'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of all movies that are part of the Rocky series, along with the number of awards each has received.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of all movies that are part of the [LITERAL] series, along with the number of awards each has received.", "masked_cypher": "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:writtenBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:writtenBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd <= [LITERAL] RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd <= [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1"], "label": 12}
{"qid": "ce02eb6c-1e89-4f9c-b968-b14917269349", "graph": "movie", "gold_cypher": "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: 'Argo'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "nl_question": "Who is the cast member of the movie Argo who passed away the earliest?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Who is the cast member of the movie [LITERAL] who passed away the earliest?", "masked_cypher": "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.first_flight ASC LIMIT 1", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.elevation_m ASC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.range_km ASC LIMIT 1"], "candidates": ["MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie) WITH DISTINCT n UNWIND n.date_of_death AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death >= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC LIMIT 1", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.date_of_death)", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC LIMIT 1"], "label": 12}
{"qid": "558e00a7-adbc-48f9-b00a-b139afd66064", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: 'Jersey Group'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "nl_question": "What are the names of movies produced by Jersey Group, along with their global box office earnings in USD?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names of movies produced by [LITERAL], along with their global box office earnings in USD?", "masked_cypher": "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.global_box_office_usd", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.global_box_office_usd", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd"], "candidates": ["MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN DISTINCT n.global_box_office_usd", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.global_box_office_usd != [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n UNWIND n.global_box_office_usd AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.global_box_office_usd >= [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.global_box_office_usd <= [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.global_box_office_usd > [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.global_box_office_usd = [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN MAX(n.global_box_office_usd)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN MIN(n.global_box_office_usd)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany)<-[r1:producedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1"], "label": 13}
{"qid": "ac026fcf-0c8f-4e05-b78c-678aa955c07f", "graph": "movie", "gold_cypher": "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: 'American Zoetrope'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the genres of movies produced by American Zoetrope, and how many such movies exist for each genre?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the genres of movies produced by [LITERAL], and how many such movies exist for each genre?", "masked_cypher": "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.country)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.runtime_minute)"], "label": 12}
{"qid": "e149c8ad-bcfe-43de-88c7-8f405095fba1", "graph": "movie", "gold_cypher": "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: 'romance film'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of awards received by romance films, and how many romance films have received each award?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of awards received by [LITERAL]s, and how many [LITERAL]s have received each award?", "masked_cypher": "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC LIMIT 1", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC LIMIT 1", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)"], "label": 11}
{"qid": "39e20a36-2165-4eba-a101-56835d787dba", "graph": "movie", "gold_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: 'Academy Award for Best Director'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of film series that include a movie which has won the Academy Award for Best Director?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of film series that include a movie which has won the [LITERAL]?", "masked_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE n.global_box_office_usd != [LITERAL] RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE n.global_box_office_usd <= [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE n.global_box_office_usd = [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 17}
{"qid": "ca7bac64-6306-4446-9351-9a80c75a324f", "graph": "movie", "gold_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: 'Sony Pictures Animation'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of film series that include movies produced by Sony Pictures Animation?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of film series that include movies produced by [LITERAL]?", "masked_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name"], "label": 8}
{"qid": "dfe29560-5178-4ab0-b53e-014e32ce1f81", "graph": "movie", "gold_cypher": "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: 'Canada'}) WITH DISTINCT n WHERE n.date_of_death = date('2006-11-20') RETURN n.name", "nl_question": "What are the names of directors who passed away on November 20th, 2006, and directed a movie released in Canada?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of directors who passed away on November [LITERAL]th, [LITERAL], and directed a movie released in [LITERAL]?", "masked_cypher": "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death = date('[LITERAL]') RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:hasCEO]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n WHERE n.founding_date = date('[LITERAL]') RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:operatesIn]->(m1:Industry {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth = '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach = '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date.year = [LITERAL] RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport),(n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name"], "candidates": ["MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death >= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death != date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death <= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death < date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death >= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death = date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death != date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death <= date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death < date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death = date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.date_of_death)", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC LIMIT 1"], "label": 14}
{"qid": "41100654-adf8-4a93-a016-b7a8e765a4ec", "graph": "movie", "gold_cypher": "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: 'Germany'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of genres associated with movies that originate from Germany?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of genres associated with movies that originate from [LITERAL]?", "masked_cypher": "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 9}
{"qid": "969caa9b-ff53-48e3-9ad4-0485bfc00013", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: 'comedy drama'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of all comedy drama movies and the number of cast members in each.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of all [LITERAL] movies and the number of cast members in each.", "masked_cypher": "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.date_of_birth)", "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)", "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "label": 16}
{"qid": "19660635-10ac-4a3a-ae70-21be9477b34e", "graph": "movie", "gold_cypher": "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: 'Spain'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of genres for movies released in Spain, and how many such movies belong to each genre?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of genres for movies released in [LITERAL], and how many such movies belong to each genre?", "masked_cypher": "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre)<-[r1:hasGenre]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "label": 14}
{"qid": "499fb8a9-f19f-4cd4-8e5d-5fb8a2731682", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: 'Jersey Group'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "nl_question": "What are the names and runtimes in minutes of movies produced by Jersey Group?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and runtimes in minutes of movies produced by [LITERAL]?", "masked_cypher": "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute"], "candidates": ["MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n UNWIND n.runtime_minute AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.runtime_minute > [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.runtime_minute >= [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.runtime_minute <= [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN DISTINCT n.runtime_minute", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.runtime_minute < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.runtime_minute = [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1"], "label": 7}
{"qid": "508e8aa7-e117-4c0d-ad59-faf302bf7ebf", "graph": "movie", "gold_cypher": "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: 'comedy film'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: 'Pirates of the Caribbean'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "nl_question": "How many movies have the genre 'comedy film' or are part of the Pirates of the Caribbean series?", "from_template": {"match_category": "special_union", "match_cypher": "CALL { MATCH (n)-[r0]->(m0<name>) RETURN n, m0 as m UNION MATCH (n)-[r1]->(m1<name>) RETURN n, m1 as m }", "return_pattern_id": "n_union_count", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN count(n)"}, "masked_question": "How many movies have the genre '[LITERAL]' or are part of the [LITERAL] series?", "masked_cypher": "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "negative_cypher": [], "hard_negative_cypher": ["CALL { MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Award)<-[r0:receivesAward]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Award)<-[r1:receivesAward]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "candidates": ["MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.global_box_office_usd AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "CALL { MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "CALL { MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC"], "label": 17}
{"qid": "9c138df0-694e-4c13-a86e-4161e8f2a7d0", "graph": "movie", "gold_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: 'Mexico'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of film series that include movies originating from Mexico, and how many such movies are part of each series?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of film series that include movies originating from [LITERAL], and how many such movies are part of each series?", "masked_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 5}
{"qid": "001c7b05-b4ee-4ca6-a425-523102ca86ad", "graph": "movie", "gold_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: 'Italy'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of film series that include movies released in Italy, and how many such movies are part of each series?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of film series that include movies released in [LITERAL], and how many such movies are part of each series?", "masked_cypher": "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 8}
{"qid": "4c7f9273-a46c-4f14-9726-81bca3fd3708", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: 'Anonymous Content'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of movies produced by Anonymous Content, and how many directors does each have?", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of movies produced by [LITERAL], and how many directors does each have?", "masked_cypher": "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:writtenBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.name AS prop RETURN DISTINCT prop", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:originatesFrom]-(m0:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)"], "label": 18}
{"qid": "47231728-d254-4ddb-a877-f45e77b98d02", "graph": "movie", "gold_cypher": "MATCH (n:Genre) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of the different genres?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of the different genres?", "masked_cypher": "MATCH (n:Genre) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Genre) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Genre) WITH DISTINCT n WHERE n.name != '[LITERAL]' RETURN n.name", "MATCH (n:Genre) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Genre {name: '[LITERAL]'}), (m0:Genre {name: '[LITERAL]'}) RETURN n.name - m0.name AS answer", "MATCH (n:Genre) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Genre) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Genre) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Genre) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name", "MATCH (n:Genre) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Genre) WITH DISTINCT n RETURN n.name", "MATCH (n:Genre) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Genre) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Genre) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Genre {name: '[LITERAL]'}), (m0:Genre {name: '[LITERAL]'}) RETURN CASE WHEN n.name >= m0.name THEN n.name ELSE m0.name END AS answer", "MATCH (n:Genre) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Genre {name: '[LITERAL]'}), (m0:Genre {name: '[LITERAL]'}) RETURN CASE WHEN n.name <= m0.name THEN n.name ELSE m0.name END AS answer", "MATCH (n:Genre {name: '[LITERAL]'}), (m0:Genre {name: '[LITERAL]'}) RETURN n.name = m0.name AS answer"], "label": 11}
{"qid": "8d02591a-08f5-481a-b45f-d1ae96ce8b4f", "graph": "movie", "gold_cypher": "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: 'Another Round'}) WITH DISTINCT n RETURN DISTINCT n.gender", "nl_question": "What are the unique genders of individuals who wrote Another Round?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique genders of individuals who wrote [LITERAL]?", "masked_cypher": "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date_of_birth", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}),(n:Person)<-[r1:hasCastMember]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender", "MATCH (n:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.gender"], "candidates": ["MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie), (n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:writtenBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop"], "label": 7}
{"qid": "f1ffb6d4-ed69-426b-bd06-5c0c2ce71d9b", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE NOT 'German' IN n.original_language RETURN n.name", "nl_question": "What are the names of movies that are part of a film series and are not originally in German?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of movies that are part of a film series and are not originally in [LITERAL]?", "masked_cypher": "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.original_language RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character),(n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character),(n:Character)-[r1:hasSpouse]->(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person),(n:Movie)-[r1:directedBy]->(m0:Person) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.filming_location RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:diedIn]->(m0:Location) WITH DISTINCT n WHERE '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name"], "candidates": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n UNWIND n.original_language AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN MAX(n.original_language)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN MIN(n.original_language)", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n WHERE '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC"], "label": 3}
{"qid": "727e8aed-2c95-44b7-98e0-f7b39eaf2d5c", "graph": "movie", "gold_cypher": "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: 'Japan'}) WITH DISTINCT n RETURN n.name, n.country", "nl_question": "What are the names and countries of production companies that have produced movies originating from Japan?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and countries of production companies that have produced movies originating from [LITERAL]?", "masked_cypher": "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:AircraftManufacturer {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:AircraftManufacturer)<-[r0:manufacturedBy]-(m0:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie {name: '[LITERAL]'}),(n:ProductionCompany)<-[r1:producedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident),(n:Airport)<-[r1:destinedFor]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n WHERE n.country <> '[LITERAL]' RETURN n.name"], "candidates": ["MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC LIMIT 1", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.country < '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.country = '[LITERAL]' RETURN n.name", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country ASC", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:ProductionCompany)<-[r0:producedBy]-(m0:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.country DESC LIMIT 1"], "label": 11}
{"qid": "68786195-9e40-40b9-a927-7bc60c63b5f0", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: 'Vancouver Film Critics Circle Award for Best Actress'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: 'Pathé'}) WITH DISTINCT n RETURN n.name, n.filming_location", "nl_question": "What are the names and filming locations of movies that won the Vancouver Film Critics Circle Award for Best Actress and were produced by Pathé?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and filming locations of movies that won the [LITERAL] and were produced by [LITERAL]?", "masked_cypher": "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.filming_location AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.runtime_minute", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.filming_location", "MATCH (n:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.filming_location", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language"], "candidates": ["MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n UNWIND n.filming_location AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n UNWIND n.filming_location AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.filming_location DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.filming_location ASC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.filming_location ASC LIMIT 1", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.filming_location AS prop RETURN DISTINCT prop", "MATCH (n:Movie) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.filming_location AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.filming_location", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.filming_location"], "label": 17}
{"qid": "ec9b5589-2183-430e-94c6-5fb29e20b8a9", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: 'Academy Award for Best Writing, Adapted Screenplay'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: 'South Korea'}) WITH DISTINCT n RETURN n.name, n.original_language", "nl_question": "What are the names and original languages of movies that have won the Academy Award for Best Writing, Adapted Screenplay and were released in South Korea?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and original languages of movies that have won the [LITERAL] and were released in [LITERAL]?", "masked_cypher": "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.original_language AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person)<-[r1:writtenBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:producedBy]->(m0:ProductionCompany {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN COUNT(DISTINCT n.original_language)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n UNWIND n.original_language AS prop RETURN DISTINCT prop", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.original_language DESC", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN MAX(n.original_language)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.original_language ASC LIMIT 1", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN MIN(n.original_language)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.original_language)", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.original_language)", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.original_language)", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.original_language)", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country {name: '[LITERAL]'}),(n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.original_language"], "label": 16}
{"qid": "2a244053-2804-40a5-b674-945677109f37", "graph": "movie", "gold_cypher": "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: 'Alien'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "List the names of all movies that are part of the Alien series, along with the number of genres each movie belongs to.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "List the names of all movies that are part of the [LITERAL] series, along with the number of genres each movie belongs to.", "masked_cypher": "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:producedBy]->(m1:ProductionCompany {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:directedBy]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:originatesFrom]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:releasedIn]->(m0:Country) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:writtenBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasCastMember]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:writtenBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN DISTINCT n.global_box_office_usd", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.global_box_office_usd)", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN COUNT(DISTINCT n.filming_location)", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd DESC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.global_box_office_usd", "MATCH (n:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:Genre)<-[r0:hasGenre]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries)<-[r0:partOfSeries]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:hasGenre]->(m0:Genre) WITH DISTINCT n RETURN n.name ORDER BY n.filming_location ASC"], "label": 15}
{"qid": "e5ea95a0-3fee-4dea-971b-e514457dd017", "graph": "movie", "gold_cypher": "MATCH (n:Award) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of the awards?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of the awards?", "masked_cypher": "MATCH (n:Award) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Award) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Award) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Award) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Award) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name", "MATCH (n:Award) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Award) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Award) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Award) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Movie) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Award) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Movie)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Award {name: '[LITERAL]'}), (m0:Award {name: '[LITERAL]'}) RETURN n.name = m0.name AS answer"], "label": 12}
{"qid": "c7ccd057-43f3-482b-b78a-a176f92d9e16", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: 'Miami Heat'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "nl_question": "Who is the oldest player drafted by the Miami Heat?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Who is the oldest player drafted by the [LITERAL]?", "masked_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.first_flight ASC LIMIT 1", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.elevation_m ASC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1"], "candidates": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth >= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE n.date_of_birth >= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n UNWIND n.date_of_birth AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth >= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth >= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth <= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.date_of_birth)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.date_of_birth AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1"], "label": 15}
{"qid": "1e60e349-2eb1-4da0-950b-2e0a5cf0f4d3", "graph": "nba", "gold_cypher": "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: 'Western Conference'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of teams in the Western Conference?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of teams in the [LITERAL]?", "masked_cypher": "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC LIMIT 1"], "label": 6}
{"qid": "58d1ad18-29ef-45bb-ad70-faf82dc5ac18", "graph": "nba", "gold_cypher": "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: 'Southeast Division'}) WITH DISTINCT n RETURN n.name, n.head_coach", "nl_question": "What are the names of teams in the Southeast Division and who are their head coaches?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names of teams in the [LITERAL] and who are their head coaches?", "masked_cypher": "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach = '[LITERAL]' RETURN n.name", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player),(n:Team)<-[r1:playsFor]-(m0:Player) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "CALL { MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN count(n)"], "candidates": ["MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach < '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach <= '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n WHERE n.head_coach <= '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.head_coach)", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC"], "label": 11}
{"qid": "3c61a785-dd4f-4246-8c10-937e21f19b72", "graph": "nba", "gold_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: 'Toyota Coliseum'}) WITH DISTINCT n RETURN n.name, n.owners", "nl_question": "What are the names and owners of teams that have used Toyota Coliseum as their home venue at any time?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and owners of teams that have used [LITERAL] as their home venue at any time?", "masked_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "CALL { MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN MAX(n.owners)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue)<-[r1:hasHomeVenue]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.owners)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN MIN(n.owners)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.owners)"], "label": 7}
{"qid": "8a980812-f705-434c-8917-990558916d43", "graph": "nba", "gold_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: 'Ball Arena'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "nl_question": "Which teams currently call Ball Arena their home venue?", "from_template": {"match_category": "special_time-sensitive", "match_cypher": "MATCH (n)-[r0<start_year,end_year^>]->(m0<name>) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL", "return_pattern_id": "n_name_special", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "Which teams currently call [LITERAL] their home venue?", "masked_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasHeadOfState]->(m0:Politician {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year != [LITERAL] RETURN n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC LIMIT 1"], "label": 10}
{"qid": "35d4cf0b-db94-4958-99a8-7e948aa4805d", "graph": "nba", "gold_cypher": "MATCH (n:Player {name: 'Scott Padgett'}) WITH DISTINCT n RETURN n.country_of_citizenship", "nl_question": "What is Scott Padgett's country of citizenship?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is [LITERAL]'s country of citizenship?", "masked_cypher": "MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country_of_citizenship", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.date_of_birth", "MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.mass_kg", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:foundedBy]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasMother]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)<-[r0:hasFather]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Character)-[r0:diedIn]->(m0:Location {name: '[LITERAL]'}),(n:Character)-[r1:hasMother]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company {name: '[LITERAL]'}),(n:Person)<-[r1:hasCEO]-(m1:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Politician)-[r0:memberOf]->(m0:PoliticalParty {name: '[LITERAL]'}),(n:Politician)<-[r1:hasHeadOfGovernment]-(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship"], "candidates": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Player) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.country_of_citizenship)", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.country_of_citizenship)", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country_of_citizenship", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player) WITH DISTINCT n RETURN MIN(n.country_of_citizenship)", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.country_of_citizenship", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.country_of_citizenship)"], "label": 13}
{"qid": "6497340e-a859-4483-9ab6-ac83a0400b2a", "graph": "nba", "gold_cypher": "MATCH (n:Team) WITH DISTINCT n RETURN n.name", "nl_question": "List the names of all NBA teams.", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "List the names of all NBA teams.", "masked_cypher": "MATCH (n:Team) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Team) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Team) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.name)", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC LIMIT 1"], "label": 2}
{"qid": "da347316-e01c-4a00-a4da-8692aac8f881", "graph": "nba", "gold_cypher": "MATCH (n:Award) WITH DISTINCT n RETURN n.name", "nl_question": "List all the awards.", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "List all the awards.", "masked_cypher": "MATCH (n:Award) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Award) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Award) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Award) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Award) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Award) WITH DISTINCT n RETURN n.name", "MATCH (n:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player) WITH DISTINCT n RETURN n.name", "MATCH (n:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Award) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name", "MATCH (n:Award) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.inception_year)", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year"], "label": 5}
{"qid": "2342d395-d41a-49ad-ac01-0a095d805658", "graph": "nba", "gold_cypher": "MATCH (n:Team {name: 'Golden State Warriors'}) WITH DISTINCT n RETURN n.inception_year", "nl_question": "When was the Golden State Warriors team founded?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "When was the [LITERAL] team founded?", "masked_cypher": "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN n.inception_year = m0.inception_year AS answer", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN n.inception_year - m0.inception_year AS answer", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN CASE WHEN n.inception_year > m0.inception_year THEN n.name ELSE m0.name END AS answer", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN CASE WHEN n.inception_year > m0.inception_year THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year != [LITERAL] RETURN n.name", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN MAX(n.inception_year)", "MATCH (n:Team) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN MIN(n.inception_year)"], "label": 11}
{"qid": "5257c6c3-779f-4b96-90d8-aaf6083d9e27", "graph": "nba", "gold_cypher": "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: 'point forward'}) WITH DISTINCT n RETURN n.name, n.inception_year", "nl_question": "What are the names and founding years of teams that have had a player in the point forward position at any time?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and founding years of teams that have had a player in the [LITERAL] position at any time?", "masked_cypher": "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Team)<-[r0:playsFor]-(m0:Player) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year != [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player), (n:Team)<-[r1:playsFor]-(m0:Player) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player), (n:Team)<-[r1:playsFor]-(m0:Player) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player), (n:Team)<-[r1:draftedBy]-(m0:Player) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name"], "label": 11}
{"qid": "4bdecfd4-4b6c-4c70-a077-026ecb1989c3", "graph": "nba", "gold_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: 'Denver Coliseum'}) WITH DISTINCT n RETURN n.name, n.owners", "nl_question": "What are the names and owners of teams that have had the Denver Coliseum as their home venue at any time?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and owners of teams that have had the [LITERAL] as their home venue at any time?", "masked_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "CALL { MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN MAX(n.owners)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue)<-[r1:hasHomeVenue]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.owners)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC", "MATCH (n:Team) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners DESC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.owners)", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.owners ASC LIMIT 1"], "label": 9}
{"qid": "cb5e298f-9275-42a8-a0a1-c3abeee8dc96", "graph": "nba", "gold_cypher": "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: 'Brooklyn Nets'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "What are the names of positions played by players drafted by the Brooklyn Nets, and how many such players are there for each position?", "from_template": {"match_category": "special_three-node-groupby", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "What are the names of positions played by players drafted by the [LITERAL], and how many such players are there for each position?", "masked_cypher": "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:hasDiplomaticRelationWith]-(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:basedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:MountainRange)<-[r0:partOf]-(m0:Mountain)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:partOfSeries]->(m1:FilmSeries {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin)-[r1:locatedIn]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person)<-[r1:hasBoardMember]-(m1:Company {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company)-[r1:hasCEO]->(m1:Person {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:River)<-[r0:flowsInto]-(m0:River)<-[r1:flowsInto]-(m1:River {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Organization)<-[r0:memberOf]-(m0:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)-[r1:memberOf]->(m1:PoliticalParty {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:InternationalOrganization)<-[r0:memberOf]-(m0:Country)-[r1:hasDiplomaticRelationWith]->(m1:Country {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.mass_kg)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.gender)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team), (n:Player)-[r1:playsFor]->(m0:Team) WITH DISTINCT n RETURN COUNT(DISTINCT n.height_cm)", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.height_cm)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.height_cm AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.height_cm)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.inception_year)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.height_cm ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.height_cm", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.height_cm DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.height_cm ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.height_cm DESC LIMIT 1"], "label": 7}
{"qid": "ddf26fab-79e3-43e7-80ba-7e9c62217385", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: 'Atlantic Division'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "nl_question": "What are the unique handedness types of players drafted by teams in the Atlantic Division?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique handedness types of players drafted by teams in the [LITERAL]?", "masked_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasCastMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}),(n:Character)-[r1:bornIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n UNWIND n.handedness AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.handedness AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name, n.handedness", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.handedness AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.handedness)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.handedness", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.handedness DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.handedness ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.handedness != '[LITERAL]' RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.handedness > '[LITERAL]' RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.handedness < '[LITERAL]' RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.handedness >= '[LITERAL]' RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.handedness", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.handedness ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.handedness DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.handedness <= '[LITERAL]' RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.handedness = '[LITERAL]' RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.handedness)"], "label": 7}
{"qid": "84db92d8-6589-4714-9d29-72a4bfe23469", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: 'Gainbridge Fieldhouse'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "nl_question": "Who is the player associated with a team that has used Gainbridge Fieldhouse as their home venue, and has the earliest recorded date of death?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Who is the player associated with a team that has used [LITERAL] as their home venue, and has the earliest recorded date of death?", "masked_cypher": "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:AircraftModel)-[r0:manufacturedBy]->(m0:AircraftManufacturer)<-[r1:manufacturedBy]-(m1:AircraftModel {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.first_flight ASC LIMIT 1", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.elevation_m ASC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country)<-[r1:releasedIn]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_survivors ASC LIMIT 1", "MATCH (n:FlightAccident)-[r0:operatedBy]->(m0:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_injuries ASC LIMIT 1", "MATCH (n:DrainageBasin)-[r0:locatedIn]->(m0:Country)-[r1:locatedIn]->(m1:Continent {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:AircraftModel)<-[r0:involves]-(m0:FlightAccident)-[r1:operatedBy]->(m1:Operator {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.range_km ASC LIMIT 1", "MATCH (n:Country)<-[r0:hasDiplomaticRelationWith]-(m0:Country)-[r1:memberOf]->(m1:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1"], "candidates": ["MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death >= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death <= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death < date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.date_of_death)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death != date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death >= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death <= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death < date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death = date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.date_of_death)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.date_of_death)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.date_of_death", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.date_of_death", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.date_of_death)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC LIMIT 1"], "label": 15}
{"qid": "6b0ce2fe-f6ab-4f9a-89e6-53df6622c36a", "graph": "nba", "gold_cypher": "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "nl_question": "Which NBA team was established the earliest?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_argmax", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order} LIMIT 1"}, "masked_question": "Which NBA team was established the earliest?", "masked_cypher": "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician),(n:Country)-[r1:hasHeadOfState]->(m0:Politician) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:Movie)-[r0:originatesFrom]->(m0:Country),(n:Movie)-[r1:releasedIn]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:DrainageBasin) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Movie)-[r0:releasedIn]->(m0:Country),(n:Movie)-[r1:originatesFrom]->(m0:Country) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute ASC LIMIT 1", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 ASC LIMIT 1", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Movie)-[r0:directedBy]->(m0:Person),(n:Movie)-[r1:writtenBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.global_box_office_usd ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:Ocean) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Operator) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC LIMIT 1", "MATCH (n:Country)-[r0:memberOf]->(m0:InternationalOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Ocean {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death ASC LIMIT 1"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team) WITH DISTINCT n RETURN MAX(n.inception_year)", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC LIMIT 1", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year DESC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.inception_year)"], "label": 11}
{"qid": "b297f41f-f097-46fb-9971-1390033e183e", "graph": "nba", "gold_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: 'Denver Coliseum'}) WITH DISTINCT n RETURN n.name, n.head_coach", "nl_question": "What are the names and head coaches of teams that have the Denver Coliseum as their home venue?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and head coaches of teams that have the [LITERAL] as their home venue?", "masked_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player),(n:Team)<-[r1:playsFor]-(m0:Player) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach = '[LITERAL]' RETURN n.name", "CALL { MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach != '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach >= '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach <= '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach < '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach > '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach = '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach < '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC LIMIT 1"], "label": 9}
{"qid": "05885222-231e-47c3-a064-a713dab2a132", "graph": "nba", "gold_cypher": "MATCH (n:Venue) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of the venues?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of the venues?", "masked_cypher": "MATCH (n:Venue) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Venue) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Venue) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Venue) WITH DISTINCT n WHERE n.name >= '[LITERAL]' RETURN n.name", "MATCH (n:Venue) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Venue) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Venue) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC", "MATCH (n:Venue) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Venue) WITH DISTINCT n RETURN n.name", "MATCH (n:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Venue) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name"], "label": 7}
{"qid": "18201426-24e8-4c45-9b6f-8b12b7c4f5a3", "graph": "nba", "gold_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: 'Toyota Coliseum'}) WITH DISTINCT n RETURN n.name, n.head_coach", "nl_question": "What are the names and head coaches of teams that have used the Toyota Coliseum as their home venue at some point?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and head coaches of teams that have used the [LITERAL] as their home venue at some point?", "masked_cypher": "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player),(n:Team)<-[r1:playsFor]-(m0:Player) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach = '[LITERAL]' RETURN n.name", "CALL { MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN COUNT(DISTINCT n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach != '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach <= '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach < '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach > '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n WHERE n.head_coach = '[LITERAL]' RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC LIMIT 1", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC LIMIT 1"], "label": 12}
{"qid": "d8947542-8e7d-4a1f-9513-b8576feccd26", "graph": "nba", "gold_cypher": "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team)<-[r1:draftedBy]-(m1:Player {name: 'Keith Booth'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of divisions that include a team which drafted Keith Booth?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of divisions that include a team which drafted [LITERAL]?", "masked_cypher": "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.place_of_birth)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.inception_year)", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.place_of_birth", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year != [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.place_of_birth < '[LITERAL]' RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.place_of_birth AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.inception_year AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name"], "label": 2}
{"qid": "e7d7ac09-21e7-4da8-b389-2d42d404bbf9", "graph": "nba", "gold_cypher": "MATCH (n:Team {name: 'Brooklyn Nets'}) WITH DISTINCT n RETURN n.head_coach", "nl_question": "Who is the head coach of the Brooklyn Nets?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "Who is the head coach of the [LITERAL]?", "masked_cypher": "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach = '[LITERAL]' RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player),(n:Team)<-[r1:playsFor]-(m0:Player) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team) WITH DISTINCT n UNWIND n.head_coach AS prop RETURN DISTINCT prop", "MATCH (n:Team) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player) WITH DISTINCT n UNWIND n.head_coach AS prop RETURN DISTINCT prop", "MATCH (n:Team) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player), (n:Team)<-[r1:draftedBy]-(m0:Player) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player), (n:Team)<-[r1:playsFor]-(m0:Player) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.head_coach AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach"], "label": 12}
{"qid": "359697f9-878a-444a-b952-c43edfef5641", "graph": "nba", "gold_cypher": "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: 'Memphis Grizzlies'}) WITH DISTINCT n RETURN n.name", "nl_question": "Which conference does the Memphis Grizzlies belong to?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)<-[r1]-(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "Which conference does the [LITERAL] belong to?", "masked_cypher": "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name > '[LITERAL]' RETURN n.name", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.name < '[LITERAL]' RETURN n.name", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach < '[LITERAL]' RETURN n.name", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name DESC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.name)", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.name ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Conference)<-[r0:partOfConference]-(m0:Division)<-[r1:partOfDivision]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.name)", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach DESC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division)-[r1:partOfConference]->(m1:Conference {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.head_coach)"], "label": 4}
{"qid": "34c88f84-1297-48aa-8f12-2a14ee597e19", "graph": "nba", "gold_cypher": "MATCH (n:Team {name: 'Brooklyn Nets'}) WITH DISTINCT n RETURN n.inception_year", "nl_question": "What year were the Brooklyn Nets founded?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What year were the [LITERAL] founded?", "masked_cypher": "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character)-[r1:hasSpouse]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN n.inception_year = m0.inception_year AS answer", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN n.inception_year - m0.inception_year AS answer", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Character {name: '[LITERAL]'}),(n:FictionalUniverse)<-[r1:fromUniverse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:FictionalUniverse) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN CASE WHEN n.inception_year > m0.inception_year THEN n.name ELSE m0.name END AS answer", "MATCH (n:Team {name: '[LITERAL]'}), (m0:Team {name: '[LITERAL]'}) RETURN CASE WHEN n.inception_year > m0.inception_year THEN n.name ELSE m0.name END AS answer"], "candidates": ["MATCH (n:Team) WITH DISTINCT n UNWIND n.inception_year AS prop RETURN DISTINCT prop", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team) WITH DISTINCT n RETURN COUNT(DISTINCT n.inception_year)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year != [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.inception_year", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team) WITH DISTINCT n RETURN MIN(n.inception_year)", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name"], "label": 13}
{"qid": "3dc0ecd4-6103-4db3-840e-906be0a25f44", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of players who have received an award?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of players who have received an award?", "masked_cypher": "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.height_cm != [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.height_cm < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.height_cm <= [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.height_cm = [LITERAL] RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.height_cm", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.date_of_birth <= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.nicknames ASC", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.nicknames DESC", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.date_of_birth", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.nicknames", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name"], "label": 9}
{"qid": "9949be94-04e8-4e5f-97a3-6b0337882684", "graph": "nba", "gold_cypher": "MATCH (n:Team {name: 'Golden State Warriors'}) WITH DISTINCT n RETURN n.head_coach", "nl_question": "Who is the head coach of the Golden State Warriors?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "Who is the head coach of the [LITERAL]?", "masked_cypher": "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.inception_year", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.head_coach = '[LITERAL]' RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player),(n:Team)<-[r1:playsFor]-(m0:Player) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN COUNT(DISTINCT n.head_coach)", "MATCH (n:Team) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue)<-[r1:hasHomeVenue]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue)<-[r1:hasHomeVenue]-(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN MIN(n.head_coach)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name ORDER BY n.head_coach ASC", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.head_coach)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.head_coach"], "label": 16}
{"qid": "254422cc-b184-4b01-a197-d41229f8f41d", "graph": "nba", "gold_cypher": "MATCH (n:Player) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of all players?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of all players?", "masked_cypher": "MATCH (n:Player) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name", "MATCH (n:Team) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Player) WITH DISTINCT n WHERE n.name <= '[LITERAL]' RETURN n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Player) WITH DISTINCT n WHERE n.name = '[LITERAL]' RETURN n.name", "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player) WITH DISTINCT n RETURN n.name", "MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Player) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name, n.place_of_birth", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH DISTINCT n RETURN n.name, n.nicknames", "MATCH (n:Player)-[r0:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name, n.date_of_birth", "MATCH (n:Player) WITH DISTINCT n RETURN n.name, n.nicknames", "MATCH (n:Player)-[r0:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name, n.nicknames"], "label": 7}
{"qid": "7960644e-99f8-48c8-9b43-729dd97a0a3f", "graph": "nba", "gold_cypher": "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.gender", "nl_question": "What are the unique genders of NBA players?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_prop_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN DISTINCT n.${prop}"}, "masked_question": "What are the unique genders of NBA players?", "masked_cypher": "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.gender", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty),(n:Politician)<-[r1:headedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:bornIn]->(m0:Location),(n:Character)-[r1:diedIn]->(m0:Location) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie),(n:Person)<-[r1:writtenBy]-(m0:Movie) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Player) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Player) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team), (n:Player)-[r1:playsFor]->(m0:Team) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team), (n:Player)-[r1:playsFor]->(m0:Team) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.gender AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team), (n:Player)-[r1:playsFor]->(m0:Team) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.gender)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.gender)"], "label": 1}
{"qid": "15cc498b-3256-4dae-8279-1b6a7a219240", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "nl_question": "What are the names of players who were drafted by a team, sorted by their mass in kilograms from heaviest to lightest?", "from_template": {"match_category": "basic_(n)-(m0)", "match_cypher": "MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_order_by", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name ORDER BY n.${prop} ${order}"}, "masked_question": "What are the names of players who were drafted by a team, sorted by their mass in kilograms from heaviest to lightest?", "masked_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport),(n:FlightAccident)-[r1:departsFrom]->(m0:Airport) WITH DISTINCT n RETURN n.name ORDER BY n.number_of_deaths DESC", "MATCH (n:Company)-[r0:hasCEO]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Country)-[r0:hasHeadOfGovernment]->(m0:Politician),(n:Country)-[r1:hasHeadOfState]->(m0:Politician) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company),(n:Person)<-[r1:hasCEO]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_death DESC", "MATCH (n:Company)-[r0:foundedBy]->(m0:Person),(n:Company)-[r1:hasCEO]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Country) WITH DISTINCT n RETURN n.name ORDER BY n.founding_date DESC", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person) WITH DISTINCT n RETURN n.name ORDER BY n.launch_year DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:River)-[r0:flowsInto]->(m0:River)-[r1:flowsInto]->(m1:Lake {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.length_km DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries) WITH DISTINCT n RETURN n.name ORDER BY n.runtime_minute DESC LIMIT 1", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth DESC LIMIT 1", "MATCH (n:Country)<-[r0:flowsThrough]-(m0:River)-[r1:flowsThrough]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.area_km2 DESC"], "candidates": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE n.mass_kg > [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE n.mass_kg >= [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE n.mass_kg <= [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE n.mass_kg < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE n.mass_kg = [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.mass_kg > [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.mass_kg > [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name, n.mass_kg", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.mass_kg < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.mass_kg > [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC LIMIT 1"], "label": 6}
{"qid": "9a3be261-90d1-405a-adcc-d5b833ee5032", "graph": "nba", "gold_cypher": "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: 'Barry Orms'}) WITH DISTINCT n RETURN n.name, n.owners", "nl_question": "What are the names and owners of the teams that Barry Orms has played for, whether in the past or currently?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)<-[r0]-(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names and owners of the teams that [LITERAL] has played for, whether in the past or currently?", "masked_cypher": "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.inception_year", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WHERE r0.start_year IS NOT NULL AND r0.end_year IS NULL WITH DISTINCT n RETURN n.name", "CALL { MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) RETURN n, m0 as m UNION MATCH (n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) RETURN n, m1 as m } WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.owners)", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.owners)", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.owners)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player) WITH DISTINCT n WHERE '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.owners", "MATCH (n:Team) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.owners)", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.owners", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.owners)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.owners)", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.owners)"], "label": 16}
{"qid": "3b950840-1d21-4843-a82a-5a4102405a0c", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: 'Silbernes Lorbeerblatt'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "nl_question": "Who are the players who have received the Silbernes Lorbeerblatt award, and which schools did they attend?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "Who are the players who have received the [LITERAL] award, and which schools did they attend?", "masked_cypher": "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN min(n.date_of_death)", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.country_of_citizenship", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.gender", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop"], "candidates": ["MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN COUNT(DISTINCT n.schools_attended)", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN MAX(n.schools_attended)", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n RETURN MIN(n.schools_attended)", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.schools_attended)"], "label": 11}
{"qid": "e66f1f03-39da-426f-8b8e-158d804347a0", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: 'Miami Heat'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "nl_question": "What are the unique schools attended by players who were drafted by the Miami Heat?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_prop_array_distinct", "return_cypher": "${match_cypher} WITH DISTINCT n UNWIND n.${prop} AS prop RETURN DISTINCT prop"}, "masked_question": "What are the unique schools attended by players who were drafted by the [LITERAL]?", "masked_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.nicknames AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:hasSpouse]->(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.occupation AS prop RETURN DISTINCT prop", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.official_language AS prop RETURN DISTINCT prop", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasBoardMember]-(m0:Company)-[r1:hasBoardMember]->(m1:Person {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse)<-[r1:fromUniverse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.occupation AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.occupation AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.nicknames AS prop RETURN DISTINCT prop", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.owners AS prop RETURN DISTINCT prop", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.country_of_citizenship AS prop RETURN DISTINCT prop"], "candidates": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN MIN(n.schools_attended)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN MIN(n.schools_attended)"], "label": 15}
{"qid": "fa32b281-08f9-4efa-808a-44fe04d081a5", "graph": "nba", "gold_cypher": "MATCH (n:Player {name: 'Scott Padgett'}) WITH DISTINCT n RETURN n.mass_kg", "nl_question": "What is Scott Padgett's weight in kilograms?", "from_template": {"match_category": "basic_(n*)", "match_cypher": "MATCH (n<name>)", "return_pattern_id": "n_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.${prop}"}, "masked_question": "What is [LITERAL]'s weight in kilograms?", "masked_cypher": "MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.mass_kg", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.country_of_citizenship", "MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.date_of_birth", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.mass_kg - m0.mass_kg AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.mass_kg - m0.mass_kg AS answer", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position)<-[r1:playsPosition]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.mass_kg <= [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg DESC", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN CASE WHEN n.mass_kg > m0.mass_kg THEN n.name ELSE m0.name END AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN CASE WHEN n.mass_kg > m0.mass_kg THEN n.name ELSE m0.name END AS answer", "MATCH (n:Character)-[r0:killedBy]->(m0:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasMother]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.creator", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)-[r1:hasFather]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender", "MATCH (n:Character)-[r0:hasFather]->(m0:Character)<-[r1:killedBy]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.gender"], "candidates": ["MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.mass_kg - m0.date_of_birth AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.date_of_birth - m0.mass_kg AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.mass_kg - m0.country_of_citizenship AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN m0.mass_kg - n.country_of_citizenship AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN m0.country_of_citizenship - n.mass_kg AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN m0.mass_kg - n.date_of_birth AS answer", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.mass_kg)", "MATCH (n:Player) WITH DISTINCT n RETURN COUNT(DISTINCT n.mass_kg)", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN m0.mass_kg - n.height_cm AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.mass_kg - m0.height_cm AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.country_of_citizenship - m0.mass_kg AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN m0.place_of_birth - n.mass_kg AS answer", "MATCH (n:Player) WITH DISTINCT n RETURN MAX(n.mass_kg)", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.place_of_birth - m0.mass_kg AS answer", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.mass_kg - m0.place_of_birth AS answer", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.mass_kg)", "MATCH (n:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.mass_kg", "MATCH (n:Player {name: '[LITERAL]'}), (m0:Player {name: '[LITERAL]'}) RETURN n.mass_kg = m0.country_of_citizenship AS answer", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN MAX(n.mass_kg)", "MATCH (n:Player) WITH DISTINCT n RETURN MIN(n.mass_kg)"], "label": 16}
{"qid": "ccfadb00-96aa-42bb-bbb3-d3b0ee64a2f9", "graph": "nba", "gold_cypher": "MATCH (n:Position) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of the positions?", "from_template": {"match_category": "basic_(n)", "match_cypher": "MATCH (n)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of the positions?", "masked_cypher": "MATCH (n:Position) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Position) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Position) WITH DISTINCT n RETURN count(DISTINCT n)", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Location) WITH DISTINCT n RETURN n.name", "MATCH (n:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:destinedFor]-(m0:FlightAccident),(n:Airport)<-[r1:departsFrom]-(m0:FlightAccident) WITH DISTINCT n RETURN n.name", "MATCH (n:Continent)<-[r0:locatedIn]-(m0:Country) WITH DISTINCT n RETURN n.name", "MATCH (n:PoliticalParty)-[r0:foundedBy]->(m0:Politician),(n:PoliticalParty)-[r1:headedBy]->(m0:Politician) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person),(n:Company)-[r1:foundedBy]->(m0:Person) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:hasSpouse]-(m0:Character),(n:Character)<-[r1:killedBy]-(m0:Character) WITH DISTINCT n RETURN n.name", "MATCH (n:Lake)<-[r0:flowsInto]-(m0:River) WITH DISTINCT n RETURN n.name", "MATCH (n:FilmSeries) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:writtenBy]-(m0:Movie),(n:Person)<-[r1:hasCastMember]-(m0:Movie) WITH DISTINCT n RETURN n.name", "MATCH (n:Person)<-[r0:hasCEO]-(m0:Company),(n:Person)<-[r1:foundedBy]-(m0:Company) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Position) WITH DISTINCT n RETURN DISTINCT n.name", "MATCH (n:Position) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH DISTINCT n RETURN n.name ORDER BY n.nicknames ASC", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH DISTINCT n RETURN n.name ORDER BY n.nicknames DESC", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.nicknames DESC", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH DISTINCT n RETURN DISTINCT n.nicknames", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.nicknames", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.nicknames", "MATCH (n:Position)<-[r0:playsPosition]-(m0:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH DISTINCT n RETURN n.name, n.nicknames", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN DISTINCT n.nicknames", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position)<-[r1:playsPosition]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.nicknames", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.nicknames"], "label": 1}
{"qid": "06435451-b21c-4944-a27f-94078c07e06b", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: 'New York Knicks'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "nl_question": "What are the names of players drafted by the New York Knicks, along with the schools they attended?", "from_template": {"match_category": "basic_(n)-(m0*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>)", "return_pattern_id": "n_name_prop", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name, n.${prop}"}, "masked_question": "What are the names of players drafted by the [LITERAL], along with the schools they attended?", "masked_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:operatesIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Politician)<-[r0:hasHeadOfState]-(m0:Country)<-[r1:belongsTo]-(m1:GovernmentOrganization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.date_of_birth ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.nicknames AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country)<-[r1:operatesIn]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Politician)<-[r0:foundedBy]-(m0:PoliticalParty)<-[r1:memberOf]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.schools_attended AS prop RETURN DISTINCT prop", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.mass_kg ASC", "MATCH (n:Politician)<-[r0:hasHeadOfGovernment]-(m0:Country) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name"], "candidates": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN COUNT(DISTINCT n.schools_attended)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN DISTINCT n.schools_attended", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team), (n:Player)-[r1:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team), (n:Player)-[r1:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended DESC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team), (n:Player)-[r1:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team), (n:Player)-[r1:draftedBy]->(m0:Team) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team), (n:Player)-[r1:playsFor]->(m0:Team) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended"], "label": 19}
{"qid": "ddea610c-00bc-444c-85b0-a5b15b93ac4c", "graph": "nba", "gold_cypher": "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team)-[r1:partOfDivision]->(m1:Division {name: 'Atlantic Division'}) WITH DISTINCT n RETURN n.name", "nl_question": "What are the names of venues that have served as home venues for teams in the Atlantic Division at any time?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)<-[r0]-(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_name", "return_cypher": "${match_cypher} WITH DISTINCT n RETURN n.name"}, "masked_question": "What are the names of venues that have served as home venues for teams in the [LITERAL] at any time?", "masked_cypher": "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Lake)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Character)<-[r0:killedBy]-(m0:Character)<-[r1:hasSpouse]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person)<-[r1:directedBy]-(m1:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Politician)<-[r0:headedBy]-(m0:PoliticalParty)-[r1:foundedBy]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Country)<-[r0:releasedIn]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:FictionalUniverse)<-[r0:fromUniverse]-(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:MountainRange)-[r0:partOf]->(m0:MountainRange)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Mountain)-[r0:partOf]->(m0:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:GovernmentOrganization)<-[r0:leads]-(m0:Position)<-[r1:holdsPosition]-(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)-[r0:hasBoardMember]->(m0:Person {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Position)<-[r0:holdsPosition]-(m0:Politician)<-[r1:headedBy]-(m1:PoliticalParty {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Airport)<-[r0:departsFrom]-(m0:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Operator)<-[r0:operatedBy]-(m0:FlightAccident)-[r1:destinedFor]->(m1:Airport {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name"], "candidates": ["MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Venue)<-[r0:hasHomeVenue]-(m0:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name", "MATCH (n:Division)<-[r0:partOfDivision]-(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.inception_year AS prop RETURN DISTINCT prop", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n UNWIND n.inception_year AS prop RETURN DISTINCT prop", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)-[r1:partOfDivision]->(m1:Division {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1", "MATCH (n:Team)-[r0:partOfDivision]->(m0:Division {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.inception_year ASC LIMIT 1"], "label": 0}
{"qid": "d332a07b-c0a7-4b9c-985d-e1aedfffc886", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: 'Hy-Vee Arena'}) WITH DISTINCT n WHERE n.date_of_birth < date('1950-01-22') RETURN n.name", "nl_question": "What are the names of players born before January 22, 1950, who were drafted by a team that has played at Hy-Vee Arena?", "from_template": {"match_category": "basic_(n)-(m0)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0)-[r1]->(m1<name>)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of players born before January [LITERAL], [LITERAL], who were drafted by a team that has played at [LITERAL]?", "masked_cypher": "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Person)<-[r0:hasCEO]-(m0:Company {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth = date('[LITERAL]') RETURN n.name", "MATCH (n:Person) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "MATCH (n:Lake)-[r0:locatedIn]->(m0:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.area_km2 < [LITERAL] RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth.year < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)<-[r1:playsFor]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death.year < [LITERAL] RETURN n.name", "MATCH (n:Movie)-[r0:partOfSeries]->(m0:FilmSeries {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.global_box_office_usd < [LITERAL] RETURN n.name", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.founding_date > date('[LITERAL]') RETURN n.name", "MATCH (n:Person)<-[r0:directedBy]-(m0:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_death = date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:destinedFor]->(m0:Airport)<-[r1:departsFrom]-(m1:FlightAccident {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name", "MATCH (n:Mountain)-[r0:locatedIn]->(m0:Country {name: '[LITERAL]'}),(n:Mountain)-[r1:partOf]->(m1:MountainRange {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.elevation_m < [LITERAL] RETURN n.name", "MATCH (n:Company)-[r0:subsidiaryOf]->(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Company)<-[r0:subsidiaryOf]-(m0:Company) WITH DISTINCT n WHERE n.launch_year < [LITERAL] RETURN n.name", "MATCH (n:Person)<-[r0:foundedBy]-(m0:Company),(n:Person)<-[r1:hasBoardMember]-(m0:Company) WITH DISTINCT n WHERE n.date_of_death > date('[LITERAL]') RETURN n.name", "MATCH (n:FlightAccident)-[r0:departsFrom]->(m0:Airport),(n:FlightAccident)-[r1:destinedFor]->(m0:Airport) WITH DISTINCT n WHERE n.date > date('[LITERAL]') RETURN n.name"], "candidates": ["MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth > date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth >= date('[LITERAL]') RETURN n.name", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.date_of_birth < date('[LITERAL]') RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year != [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)-[r0:hasHomeVenue]->(m0:Venue {name: '[LITERAL]'}),(n:Team)<-[r1:draftedBy]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}),(n:Team)-[r1:hasHomeVenue]->(m1:Venue {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year >= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player), (n:Team)<-[r1:draftedBy]-(m0:Player) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name"], "label": 2}
{"qid": "a657a788-c2d4-4eb0-aeac-066c20685ad8", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: 'power forward'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: 'Princess of Asturias Award for Sports'}) WITH DISTINCT n WHERE 'Lausanne Collegiate School' IN n.schools_attended RETURN n.name", "nl_question": "What are the names of power forwards who have won the Princess of Asturias Award for Sports and attended Lausanne Collegiate School?", "from_template": {"match_category": "basic_(n)-(m0*),(n)-(m1*)", "match_cypher": "MATCH (n)-[r0]->(m0<name>),(n)-[r1]->(m1<name>)", "return_pattern_id": "n_where", "return_cypher": "${match_cypher} WITH DISTINCT n WHERE ${condition} RETURN n.name"}, "masked_question": "What are the names of [LITERAL]s who have won the [LITERAL] and attended [LITERAL]?", "masked_cypher": "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Politician)-[r0:holdsPosition]->(m0:Position {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Country)-[r0:hasDiplomaticRelationWith]->(m0:Country)-[r1:hasHeadOfState]->(m1:Politician {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.official_language RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization)-[r1:basedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Person)<-[r0:hasCastMember]-(m0:Movie {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Character)-[r0:killedBy]->(m0:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.country_of_citizenship RETURN n.name", "MATCH (n:Movie)-[r0:writtenBy]->(m0:Person {name: '[LITERAL]'}),(n:Movie)-[r1:hasGenre]->(m1:Genre {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.original_language RETURN n.name", "MATCH (n:Character)-[r0:memberOf]->(m0:Organization {name: '[LITERAL]'}),(n:Character)-[r1:memberOf]->(m1:Organization {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)-[r1:diedIn]->(m1:Location {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}),(n:Character)<-[r1:hasStudent]-(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Character)<-[r0:hasStudent]-(m0:Character)-[r1:killedBy]->(m1:Character {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name", "MATCH (n:Team)<-[r0:playsFor]-(m0:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.owners RETURN n.name", "MATCH (n:Character)-[r0:fromUniverse]->(m0:FictionalUniverse {name: '[LITERAL]'}) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.occupation RETURN n.name"], "candidates": ["MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE NOT '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award)<-[r1:receivesAward]-(m1:Player {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.height_cm > [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.height_cm >= [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.height_cm > [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.height_cm < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.height_cm <= [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.schools_attended", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.height_cm < [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.height_cm", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.height_cm", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE '[LITERAL]' IN n.schools_attended RETURN n.name", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.height_cm = [LITERAL] RETURN n.name", "MATCH (n:Player)-[r0:playsFor]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name, n.height_cm", "MATCH (n:Player)-[r0:playsPosition]->(m0:Position {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN n.name ORDER BY n.schools_attended ASC LIMIT 1"], "label": 16}
{"qid": "1149e1e6-a5af-4763-8fbc-ca4b18764859", "graph": "nba", "gold_cypher": "MATCH (n:Player)-[r1:draftedBy]->(m1:Team {name: 'Oklahoma City Thunder'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "nl_question": "Provide the names of all players drafted by the Oklahoma City Thunder, along with the number of awards each player has received.", "from_template": {"match_category": "special_optional-match", "match_cypher": "MATCH (n)-[r1]->(m1<name>) OPTIONAL MATCH (n)-[r0]->(m0)", "return_pattern_id": "n_m0_group_by_count", "return_cypher": "${match_cypher} WITH n, count(DISTINCT m0) AS num RETURN n.name, num"}, "masked_question": "Provide the names of all players drafted by the [LITERAL], along with the number of awards each player has received.", "masked_cypher": "MATCH (n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "negative_cypher": [], "hard_negative_cypher": ["MATCH (n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsFor]->(m0:Team) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsPosition]->(m0:Position) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:playsFor]->(m1:Team {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:playsFor]->(m0:Team) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r1:playsPosition]->(m1:Position {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:flowsThrough]-(m1:River {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Location)<-[r1:basedIn]-(m1:Organization {name: '[LITERAL]'}) OPTIONAL MATCH (n:Location)<-[r0:diedIn]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Movie)-[r1:releasedIn]->(m1:Country {name: '[LITERAL]'}) OPTIONAL MATCH (n:Movie)-[r0:directedBy]->(m0:Person) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Character)-[r1:fromUniverse]->(m1:FictionalUniverse {name: '[LITERAL]'}) OPTIONAL MATCH (n:Character)<-[r0:killedBy]-(m0:Character) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Country)<-[r1:locatedIn]-(m1:Mountain {name: '[LITERAL]'}) OPTIONAL MATCH (n:Country)<-[r0:locatedIn]-(m0:DrainageBasin) WITH n, count(DISTINCT m0) AS num RETURN n.name, num"], "candidates": ["MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n)", "MATCH (n:Award)<-[r0:receivesAward]-(m0:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.height_cm)", "MATCH (n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) OPTIONAL MATCH (n:Player)-[r0:receivesAward]->(m0:Award) WITH n, count(DISTINCT m0) AS num RETURN n.name, num", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.name)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.gender)", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.date_of_birth)", "MATCH (n:Player)-[r0:receivesAward]->(m0:Award {name: '[LITERAL]'}),(n:Player)-[r1:draftedBy]->(m1:Team {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.place_of_birth)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.date_of_birth)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.nicknames)", "MATCH (n:Player)-[r0:draftedBy]->(m0:Team {name: '[LITERAL]'}),(n:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.place_of_birth)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.inception_year)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year > [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n RETURN COUNT(DISTINCT n.owners)", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year <= [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year < [LITERAL] RETURN n.name", "MATCH (n:Team)<-[r0:draftedBy]-(m0:Player)-[r1:receivesAward]->(m1:Award {name: '[LITERAL]'}) WITH DISTINCT n WHERE n.inception_year = [LITERAL] RETURN n.name"], "label": 6}
